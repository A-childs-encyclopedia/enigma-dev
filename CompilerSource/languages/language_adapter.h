/**
  @file  language_adapter.h
  @brief Defines a class by which ENIGMA can interface with and output to other languages.
  
  @section License
    Copyright (C) 2008-2012 Josh Ventura
    This file is a part of the ENIGMA Development Environment.

    ENIGMA is free software: you can redistribute it and/or modify it under the
    terms of the GNU General Public License as published by the Free Software
    Foundation, version 3 of the license or any later version.

    This application and its source code is distributed AS-IS, WITHOUT ANY WARRANTY; 
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
    PURPOSE. See the GNU General Public License for more details.

    You should have recieved a copy of the GNU General Public License along
    with this code. If not, see <http://www.gnu.org/licenses/>
**/

#ifndef _LANGUAGE_ADAPTER__H
#define _LANGUAGE_ADAPTER__H

struct language_adapter;

#include <string>
using namespace std;
#include "parser/object_storage.h"
#include "backend/EnigmaStruct.h"
#include "frontend.h"

struct language_adapter {
  virtual string get_name() = 0;
  
  // Common Settings/Information
  vector<string> requested_extensions; ///< Extensions that were requested by the user or by the IDE by default.
  vector<parsed_extension> parsed_extensions; ///< Extensions which have been loaded
  
  // IDE_EDITABLEs added before compile
  virtual int compile_write_resource_names(compile_context &ctex) = 0;
  virtual int compile_writeGlobals(compile_context &ctex) = 0;
  virtual int compile_writeObjectData(compile_context &ctex) = 0;
  virtual int compile_writeObjAccess(compile_context &ctex) = 0;
  virtual int compile_writeFontInfo(compile_context &ctex) = 0;
  virtual int compile_writeRoomData(compile_context &ctex) = 0;
  virtual int compile_writeDefraggedEvents(compile_context &ctex) = 0;
  virtual int compile_handle_templates(compile_context &ctex) = 0;

  /// Abstract structure for storing a game module and writing resources to it; its
  /// implementation depends on the language plugin. It may in fact represent a directory!
  struct resource_writer {
    // Resources added to module
    virtual int module_write_sprites    (compile_context &ctex) = 0; ///< Method to write all sprites to the compiled module
    virtual int module_write_sounds     (compile_context &ctex) = 0; ///< Method to write all sounds to the compiled module
    virtual int module_write_backgrounds(compile_context &ctex) = 0; ///< Method to write all backgrounds to the compiled module
    virtual int module_write_paths      (compile_context &ctex) = 0; ///< Method to write all paths to the compiled module
    virtual int module_write_fonts      (compile_context &ctex) = 0; ///< Method to write all fonts to the compiled module
    virtual int module_write_extensions (compile_context &ctex) = 0; ///< Method to write any and all extension resources to the compiled module
    virtual int module_finalize         (compile_context &ctex) = 0; ///< Finalize the module
  };
// Scripts, Timelines, Objects, and Rooms are part of the code
  
  
  // Globals and locals
  virtual int load_shared_locals() = 0; ///< Load a list of shared or "global" locals, from the tier system.
  virtual int load_extension_locals() = 0; ///< Load a list of shared or "global" locals, from enabled extensions.
  //virtual bool global_exists(string name) = 0; ///< Check if there is a global variable by a given name.
  
  // Definitions handling
  string last_configuration;
  virtual const char* establish_bearings(const char *configuration) = 0;
  virtual syntax_error* definitionsModified(const char*, const char*) = 0; ///< Parse the build path for definitions (or acquire them by a less crafty means).
  virtual void clear_ide_editables() = 0; ///< Reset files in the build path generated by the development environment, such as resource lists.
  virtual int rebuild() = 0; ///< Rebuild the entire engine
  
  // The main compiler
  virtual resource_writer *compile(compile_context &ctex, const char* filename) = 0;
  virtual void run_game(compile_context &ctex, resource_writer *resw) = 0;
  string build_error; ///< Any error that occurred during build.
  
  virtual ~language_adapter();
};

extern map<string,language_adapter*> languages;
extern language_adapter *current_language;
extern string current_language_name;

#include <API/context.h>
extern jdi::context *main_context;

#endif
