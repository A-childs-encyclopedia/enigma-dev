// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Background.proto

#include "Background.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace buffers {
namespace resources {
class BackgroundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Background>
      _instance;
} _Background_default_instance_;
}  // namespace resources
}  // namespace buffers
namespace protobuf_Background_2eproto {
static void InitDefaultsBackground() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buffers::resources::_Background_default_instance_;
    new (ptr) ::buffers::resources::Background();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::resources::Background::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Background =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBackground}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Background.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, preload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, smooth_edges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, use_as_tileset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, tile_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, tile_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, horizontal_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, vertical_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, horizontal_spacing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, vertical_spacing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, h_tile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, v_tile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, texture_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, for3d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Background, image_),
  1,
  3,
  4,
  5,
  2,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  6,
  15,
  16,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::buffers::resources::Background)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::resources::_Background_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Background.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020Background.proto\022\021buffers.resources\032\ro"
      "ptions.proto\"\320\004\n\nBackground\022\036\n\002id\030\001 \001(\005B"
      "\022\222\265\030\016GMX_DEPRECATED\022#\n\007preload\030\002 \001(\010B\022\222\265"
      "\030\016GMX_DEPRECATED\022(\n\014smooth_edges\030\003 \001(\010B\022"
      "\222\265\030\016GMX_DEPRECATED\022%\n\016use_as_tileset\030\004 \001"
      "(\010B\r\222\265\030\tistileset\022!\n\ntile_width\030\005 \001(\005B\r\222"
      "\265\030\ttilewidth\022#\n\013tile_height\030\006 \001(\005B\016\222\265\030\nt"
      "ileheight\022\'\n\021horizontal_offset\030\007 \001(\005B\014\222\265"
      "\030\010tilexoff\022%\n\017vertical_offset\030\010 \001(\005B\014\222\265\030"
      "\010tileyoff\022(\n\022horizontal_spacing\030\t \001(\005B\014\222"
      "\265\030\010tilehsep\022&\n\020vertical_spacing\030\n \001(\005B\014\222"
      "\265\030\010tilevsep\022\031\n\006h_tile\030\013 \001(\005B\t\222\265\030\005HTile\022\031"
      "\n\006v_tile\030\014 \001(\005B\t\222\265\030\005VTile\0226\n\rtexture_gro"
      "up\030\r \001(\005B\037\222\265\030\033TextureGroups/TextureGroup"
      "0\022\030\n\005for3D\030\016 \001(\010B\t\222\265\030\005For3D\022\r\n\005width\030\017 \001"
      "(\r\022\016\n\006height\030\020 \001(\r\022\033\n\005image\030\021 \001(\tB\014\222\265\030\004d"
      "ata\210\265\030\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 647);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Background.proto", &protobuf_RegisterTypes);
  ::protobuf_options_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Background_2eproto
namespace buffers {
namespace resources {

// ===================================================================

void Background::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Background::kIdFieldNumber;
const int Background::kPreloadFieldNumber;
const int Background::kSmoothEdgesFieldNumber;
const int Background::kUseAsTilesetFieldNumber;
const int Background::kTileWidthFieldNumber;
const int Background::kTileHeightFieldNumber;
const int Background::kHorizontalOffsetFieldNumber;
const int Background::kVerticalOffsetFieldNumber;
const int Background::kHorizontalSpacingFieldNumber;
const int Background::kVerticalSpacingFieldNumber;
const int Background::kHTileFieldNumber;
const int Background::kVTileFieldNumber;
const int Background::kTextureGroupFieldNumber;
const int Background::kFor3DFieldNumber;
const int Background::kWidthFieldNumber;
const int Background::kHeightFieldNumber;
const int Background::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Background::Background()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Background_2eproto::scc_info_Background.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Background)
}
Background::Background(const Background& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Background)
}

void Background::SharedCtor() {
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&id_)) + sizeof(height_));
}

Background::~Background() {
  // @@protoc_insertion_point(destructor:buffers.resources.Background)
  SharedDtor();
}

void Background::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Background::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Background::descriptor() {
  ::protobuf_Background_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Background_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Background& Background::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Background_2eproto::scc_info_Background.base);
  return *internal_default_instance();
}


void Background::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Background)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    image_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tile_height_) -
        reinterpret_cast<char*>(&id_)) + sizeof(tile_height_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&horizontal_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&horizontal_offset_)) + sizeof(width_));
  }
  height_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Background::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Background)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [(.buffers.gmx) = "GMX_DEPRECATED"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preload = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_preload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool smooth_edges = 3 [(.buffers.gmx) = "GMX_DEPRECATED"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_smooth_edges();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smooth_edges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_as_tileset = 4 [(.buffers.gmx) = "istileset"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_use_as_tileset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_as_tileset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tile_width = 5 [(.buffers.gmx) = "tilewidth"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tile_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tile_height = 6 [(.buffers.gmx) = "tileheight"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tile_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 horizontal_offset = 7 [(.buffers.gmx) = "tilexoff"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_horizontal_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vertical_offset = 8 [(.buffers.gmx) = "tileyoff"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_vertical_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 horizontal_spacing = 9 [(.buffers.gmx) = "tilehsep"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_horizontal_spacing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_spacing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vertical_spacing = 10 [(.buffers.gmx) = "tilevsep"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_vertical_spacing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_spacing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 h_tile = 11 [(.buffers.gmx) = "HTile"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_h_tile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_tile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 v_tile = 12 [(.buffers.gmx) = "VTile"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_v_tile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_tile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 texture_group = 13 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_texture_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &texture_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool for3D = 14 [(.buffers.gmx) = "For3D"];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_for3d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for3d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image = 17 [(.buffers.file_path) = true, (.buffers.gmx) = "data"];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Background.image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Background)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Background)
  return false;
#undef DO_
}

void Background::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Background)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool preload = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->preload(), output);
  }

  // optional bool smooth_edges = 3 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->smooth_edges(), output);
  }

  // optional bool use_as_tileset = 4 [(.buffers.gmx) = "istileset"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_as_tileset(), output);
  }

  // optional int32 tile_width = 5 [(.buffers.gmx) = "tilewidth"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tile_width(), output);
  }

  // optional int32 tile_height = 6 [(.buffers.gmx) = "tileheight"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tile_height(), output);
  }

  // optional int32 horizontal_offset = 7 [(.buffers.gmx) = "tilexoff"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->horizontal_offset(), output);
  }

  // optional int32 vertical_offset = 8 [(.buffers.gmx) = "tileyoff"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vertical_offset(), output);
  }

  // optional int32 horizontal_spacing = 9 [(.buffers.gmx) = "tilehsep"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->horizontal_spacing(), output);
  }

  // optional int32 vertical_spacing = 10 [(.buffers.gmx) = "tilevsep"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vertical_spacing(), output);
  }

  // optional int32 h_tile = 11 [(.buffers.gmx) = "HTile"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->h_tile(), output);
  }

  // optional int32 v_tile = 12 [(.buffers.gmx) = "VTile"];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->v_tile(), output);
  }

  // optional int32 texture_group = 13 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->texture_group(), output);
  }

  // optional bool for3D = 14 [(.buffers.gmx) = "For3D"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->for3d(), output);
  }

  // optional uint32 width = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->width(), output);
  }

  // optional uint32 height = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->height(), output);
  }

  // optional string image = 17 [(.buffers.file_path) = true, (.buffers.gmx) = "data"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Background.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Background)
}

::google::protobuf::uint8* Background::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Background)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool preload = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->preload(), target);
  }

  // optional bool smooth_edges = 3 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->smooth_edges(), target);
  }

  // optional bool use_as_tileset = 4 [(.buffers.gmx) = "istileset"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_as_tileset(), target);
  }

  // optional int32 tile_width = 5 [(.buffers.gmx) = "tilewidth"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tile_width(), target);
  }

  // optional int32 tile_height = 6 [(.buffers.gmx) = "tileheight"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tile_height(), target);
  }

  // optional int32 horizontal_offset = 7 [(.buffers.gmx) = "tilexoff"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->horizontal_offset(), target);
  }

  // optional int32 vertical_offset = 8 [(.buffers.gmx) = "tileyoff"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->vertical_offset(), target);
  }

  // optional int32 horizontal_spacing = 9 [(.buffers.gmx) = "tilehsep"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->horizontal_spacing(), target);
  }

  // optional int32 vertical_spacing = 10 [(.buffers.gmx) = "tilevsep"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vertical_spacing(), target);
  }

  // optional int32 h_tile = 11 [(.buffers.gmx) = "HTile"];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->h_tile(), target);
  }

  // optional int32 v_tile = 12 [(.buffers.gmx) = "VTile"];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->v_tile(), target);
  }

  // optional int32 texture_group = 13 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->texture_group(), target);
  }

  // optional bool for3D = 14 [(.buffers.gmx) = "For3D"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->for3d(), target);
  }

  // optional uint32 width = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->width(), target);
  }

  // optional uint32 height = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->height(), target);
  }

  // optional string image = 17 [(.buffers.file_path) = true, (.buffers.gmx) = "data"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Background.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Background)
  return target;
}

size_t Background::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Background)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string image = 17 [(.buffers.file_path) = true, (.buffers.gmx) = "data"];
    if (has_image()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional int32 id = 1 [(.buffers.gmx) = "GMX_DEPRECATED"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 tile_width = 5 [(.buffers.gmx) = "tilewidth"];
    if (has_tile_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tile_width());
    }

    // optional bool preload = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
    if (has_preload()) {
      total_size += 1 + 1;
    }

    // optional bool smooth_edges = 3 [(.buffers.gmx) = "GMX_DEPRECATED"];
    if (has_smooth_edges()) {
      total_size += 1 + 1;
    }

    // optional bool use_as_tileset = 4 [(.buffers.gmx) = "istileset"];
    if (has_use_as_tileset()) {
      total_size += 1 + 1;
    }

    // optional bool for3D = 14 [(.buffers.gmx) = "For3D"];
    if (has_for3d()) {
      total_size += 1 + 1;
    }

    // optional int32 tile_height = 6 [(.buffers.gmx) = "tileheight"];
    if (has_tile_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tile_height());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 horizontal_offset = 7 [(.buffers.gmx) = "tilexoff"];
    if (has_horizontal_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horizontal_offset());
    }

    // optional int32 vertical_offset = 8 [(.buffers.gmx) = "tileyoff"];
    if (has_vertical_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertical_offset());
    }

    // optional int32 horizontal_spacing = 9 [(.buffers.gmx) = "tilehsep"];
    if (has_horizontal_spacing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horizontal_spacing());
    }

    // optional int32 vertical_spacing = 10 [(.buffers.gmx) = "tilevsep"];
    if (has_vertical_spacing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertical_spacing());
    }

    // optional int32 h_tile = 11 [(.buffers.gmx) = "HTile"];
    if (has_h_tile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h_tile());
    }

    // optional int32 v_tile = 12 [(.buffers.gmx) = "VTile"];
    if (has_v_tile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v_tile());
    }

    // optional int32 texture_group = 13 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
    if (has_texture_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->texture_group());
    }

    // optional uint32 width = 15;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

  }
  // optional uint32 height = 16;
  if (has_height()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Background::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Background)
  GOOGLE_DCHECK_NE(&from, this);
  const Background* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Background>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Background)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Background)
    MergeFrom(*source);
  }
}

void Background::MergeFrom(const Background& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Background)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tile_width_ = from.tile_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      preload_ = from.preload_;
    }
    if (cached_has_bits & 0x00000010u) {
      smooth_edges_ = from.smooth_edges_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_as_tileset_ = from.use_as_tileset_;
    }
    if (cached_has_bits & 0x00000040u) {
      for3d_ = from.for3d_;
    }
    if (cached_has_bits & 0x00000080u) {
      tile_height_ = from.tile_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      horizontal_offset_ = from.horizontal_offset_;
    }
    if (cached_has_bits & 0x00000200u) {
      vertical_offset_ = from.vertical_offset_;
    }
    if (cached_has_bits & 0x00000400u) {
      horizontal_spacing_ = from.horizontal_spacing_;
    }
    if (cached_has_bits & 0x00000800u) {
      vertical_spacing_ = from.vertical_spacing_;
    }
    if (cached_has_bits & 0x00001000u) {
      h_tile_ = from.h_tile_;
    }
    if (cached_has_bits & 0x00002000u) {
      v_tile_ = from.v_tile_;
    }
    if (cached_has_bits & 0x00004000u) {
      texture_group_ = from.texture_group_;
    }
    if (cached_has_bits & 0x00008000u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_height(from.height());
  }
}

void Background::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Background)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Background::CopyFrom(const Background& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Background)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Background::IsInitialized() const {
  return true;
}

void Background::Swap(Background* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Background::InternalSwap(Background* other) {
  using std::swap;
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(tile_width_, other->tile_width_);
  swap(preload_, other->preload_);
  swap(smooth_edges_, other->smooth_edges_);
  swap(use_as_tileset_, other->use_as_tileset_);
  swap(for3d_, other->for3d_);
  swap(tile_height_, other->tile_height_);
  swap(horizontal_offset_, other->horizontal_offset_);
  swap(vertical_offset_, other->vertical_offset_);
  swap(horizontal_spacing_, other->horizontal_spacing_);
  swap(vertical_spacing_, other->vertical_spacing_);
  swap(h_tile_, other->h_tile_);
  swap(v_tile_, other->v_tile_);
  swap(texture_group_, other->texture_group_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Background::GetMetadata() const {
  protobuf_Background_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Background_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace buffers
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::buffers::resources::Background* Arena::CreateMaybeMessage< ::buffers::resources::Background >(Arena* arena) {
  return Arena::CreateInternal< ::buffers::resources::Background >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
