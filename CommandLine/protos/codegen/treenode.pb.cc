// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: treenode.proto

#include "treenode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Background_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Background_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Background;
}  // namespace protobuf_Background_2eproto
namespace protobuf_Font_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Font_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Font;
}  // namespace protobuf_Font_2eproto
namespace protobuf_Include_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Include_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Include;
}  // namespace protobuf_Include_2eproto
namespace protobuf_Object_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Object_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Object;
}  // namespace protobuf_Object_2eproto
namespace protobuf_Path_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Path_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Path;
}  // namespace protobuf_Path_2eproto
namespace protobuf_Room_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Room_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Room;
}  // namespace protobuf_Room_2eproto
namespace protobuf_Script_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Script_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Script;
}  // namespace protobuf_Script_2eproto
namespace protobuf_Settings_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Settings_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Settings;
}  // namespace protobuf_Settings_2eproto
namespace protobuf_Shader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Shader_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Shader;
}  // namespace protobuf_Shader_2eproto
namespace protobuf_Sound_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Sound_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sound;
}  // namespace protobuf_Sound_2eproto
namespace protobuf_Sprite_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Sprite_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sprite;
}  // namespace protobuf_Sprite_2eproto
namespace protobuf_Timeline_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Timeline_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Timeline;
}  // namespace protobuf_Timeline_2eproto
namespace protobuf_treenode_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_treenode_2eproto ::google::protobuf::internal::SCCInfo<12> scc_info_TreeNode;
}  // namespace protobuf_treenode_2eproto
namespace buffers {
class TreeNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TreeNode>
      _instance;
  bool folder_;
  const ::buffers::resources::Sprite* sprite_;
  const ::buffers::resources::Sound* sound_;
  const ::buffers::resources::Background* background_;
  const ::buffers::resources::Path* path_;
  const ::buffers::resources::Script* script_;
  const ::buffers::resources::Shader* shader_;
  const ::buffers::resources::Font* font_;
  const ::buffers::resources::Timeline* timeline_;
  const ::buffers::resources::Object* object_;
  const ::buffers::resources::Room* room_;
  const ::buffers::resources::Include* include_;
  const ::buffers::resources::Settings* settings_;
} _TreeNode_default_instance_;
}  // namespace buffers
namespace protobuf_treenode_2eproto {
static void InitDefaultsTreeNode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buffers::_TreeNode_default_instance_;
    new (ptr) ::buffers::TreeNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::TreeNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_TreeNode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsTreeNode}, {
      &protobuf_Sprite_2eproto::scc_info_Sprite.base,
      &protobuf_Sound_2eproto::scc_info_Sound.base,
      &protobuf_Background_2eproto::scc_info_Background.base,
      &protobuf_Path_2eproto::scc_info_Path.base,
      &protobuf_Script_2eproto::scc_info_Script.base,
      &protobuf_Shader_2eproto::scc_info_Shader.base,
      &protobuf_Font_2eproto::scc_info_Font.base,
      &protobuf_Timeline_2eproto::scc_info_Timeline.base,
      &protobuf_Object_2eproto::scc_info_Object.base,
      &protobuf_Room_2eproto::scc_info_Room.base,
      &protobuf_Include_2eproto::scc_info_Include.base,
      &protobuf_Settings_2eproto::scc_info_Settings.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TreeNode.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::TreeNode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::TreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::TreeNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::buffers::TreeNodeDefaultTypeInternal, folder_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, sprite_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, sound_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, background_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, path_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, script_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, shader_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, font_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, timeline_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, object_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, room_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, include_),
  offsetof(::buffers::TreeNodeDefaultTypeInternal, settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::TreeNode, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::TreeNode, child_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::TreeNode, type_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::buffers::TreeNode)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::_TreeNode_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "treenode.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016treenode.proto\022\007buffers\032\014Sprite.proto\032"
      "\013Sound.proto\032\020Background.proto\032\014Object.p"
      "roto\032\014Script.proto\032\014Shader.proto\032\nPath.p"
      "roto\032\nFont.proto\032\016Timeline.proto\032\nRoom.p"
      "roto\032\rInclude.proto\032\016Settings.proto\"\364\004\n\010"
      "TreeNode\022\020\n\006folder\030\001 \001(\010H\000\022+\n\006sprite\030\002 \001"
      "(\0132\031.buffers.resources.SpriteH\000\022)\n\005sound"
      "\030\003 \001(\0132\030.buffers.resources.SoundH\000\0223\n\nba"
      "ckground\030\004 \001(\0132\035.buffers.resources.Backg"
      "roundH\000\022\'\n\004path\030\005 \001(\0132\027.buffers.resource"
      "s.PathH\000\022+\n\006script\030\006 \001(\0132\031.buffers.resou"
      "rces.ScriptH\000\022+\n\006shader\030\007 \001(\0132\031.buffers."
      "resources.ShaderH\000\022\'\n\004font\030\010 \001(\0132\027.buffe"
      "rs.resources.FontH\000\022/\n\010timeline\030\t \001(\0132\033."
      "buffers.resources.TimelineH\000\022+\n\006object\030\n"
      " \001(\0132\031.buffers.resources.ObjectH\000\022\'\n\004roo"
      "m\030\013 \001(\0132\027.buffers.resources.RoomH\000\022-\n\007in"
      "clude\030\014 \001(\0132\032.buffers.resources.IncludeH"
      "\000\022/\n\010settings\030\r \001(\0132\033.buffers.resources."
      "SettingsH\000\022\014\n\004name\030\020 \001(\t\022 \n\005child\030\021 \003(\0132"
      "\021.buffers.TreeNodeB\006\n\004type"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 826);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "treenode.proto", &protobuf_RegisterTypes);
  ::protobuf_Sprite_2eproto::AddDescriptors();
  ::protobuf_Sound_2eproto::AddDescriptors();
  ::protobuf_Background_2eproto::AddDescriptors();
  ::protobuf_Object_2eproto::AddDescriptors();
  ::protobuf_Script_2eproto::AddDescriptors();
  ::protobuf_Shader_2eproto::AddDescriptors();
  ::protobuf_Path_2eproto::AddDescriptors();
  ::protobuf_Font_2eproto::AddDescriptors();
  ::protobuf_Timeline_2eproto::AddDescriptors();
  ::protobuf_Room_2eproto::AddDescriptors();
  ::protobuf_Include_2eproto::AddDescriptors();
  ::protobuf_Settings_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_treenode_2eproto
namespace buffers {

// ===================================================================

void TreeNode::InitAsDefaultInstance() {
  ::buffers::_TreeNode_default_instance_.folder_ = false;
  ::buffers::_TreeNode_default_instance_.sprite_ = const_cast< ::buffers::resources::Sprite*>(
      ::buffers::resources::Sprite::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.sound_ = const_cast< ::buffers::resources::Sound*>(
      ::buffers::resources::Sound::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.background_ = const_cast< ::buffers::resources::Background*>(
      ::buffers::resources::Background::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.path_ = const_cast< ::buffers::resources::Path*>(
      ::buffers::resources::Path::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.script_ = const_cast< ::buffers::resources::Script*>(
      ::buffers::resources::Script::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.shader_ = const_cast< ::buffers::resources::Shader*>(
      ::buffers::resources::Shader::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.font_ = const_cast< ::buffers::resources::Font*>(
      ::buffers::resources::Font::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.timeline_ = const_cast< ::buffers::resources::Timeline*>(
      ::buffers::resources::Timeline::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.object_ = const_cast< ::buffers::resources::Object*>(
      ::buffers::resources::Object::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.room_ = const_cast< ::buffers::resources::Room*>(
      ::buffers::resources::Room::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.include_ = const_cast< ::buffers::resources::Include*>(
      ::buffers::resources::Include::internal_default_instance());
  ::buffers::_TreeNode_default_instance_.settings_ = const_cast< ::buffers::resources::Settings*>(
      ::buffers::resources::Settings::internal_default_instance());
}
void TreeNode::set_allocated_sprite(::buffers::resources::Sprite* sprite) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (sprite) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sprite = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sprite, submessage_arena);
    }
    set_has_sprite();
    type_.sprite_ = sprite;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.sprite)
}
void TreeNode::clear_sprite() {
  if (has_sprite()) {
    delete type_.sprite_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_sound(::buffers::resources::Sound* sound) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (sound) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sound = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sound, submessage_arena);
    }
    set_has_sound();
    type_.sound_ = sound;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.sound)
}
void TreeNode::clear_sound() {
  if (has_sound()) {
    delete type_.sound_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_background(::buffers::resources::Background* background) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (background) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      background = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    set_has_background();
    type_.background_ = background;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.background)
}
void TreeNode::clear_background() {
  if (has_background()) {
    delete type_.background_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_path(::buffers::resources::Path* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    set_has_path();
    type_.path_ = path;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.path)
}
void TreeNode::clear_path() {
  if (has_path()) {
    delete type_.path_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_script(::buffers::resources::Script* script) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (script) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      script = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, script, submessage_arena);
    }
    set_has_script();
    type_.script_ = script;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.script)
}
void TreeNode::clear_script() {
  if (has_script()) {
    delete type_.script_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_shader(::buffers::resources::Shader* shader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (shader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shader, submessage_arena);
    }
    set_has_shader();
    type_.shader_ = shader;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.shader)
}
void TreeNode::clear_shader() {
  if (has_shader()) {
    delete type_.shader_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_font(::buffers::resources::Font* font) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (font) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      font = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, font, submessage_arena);
    }
    set_has_font();
    type_.font_ = font;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.font)
}
void TreeNode::clear_font() {
  if (has_font()) {
    delete type_.font_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_timeline(::buffers::resources::Timeline* timeline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (timeline) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timeline = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeline, submessage_arena);
    }
    set_has_timeline();
    type_.timeline_ = timeline;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.timeline)
}
void TreeNode::clear_timeline() {
  if (has_timeline()) {
    delete type_.timeline_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_object(::buffers::resources::Object* object) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (object) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      object = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    set_has_object();
    type_.object_ = object;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.object)
}
void TreeNode::clear_object() {
  if (has_object()) {
    delete type_.object_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_room(::buffers::resources::Room* room) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (room) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      room = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    set_has_room();
    type_.room_ = room;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.room)
}
void TreeNode::clear_room() {
  if (has_room()) {
    delete type_.room_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_include(::buffers::resources::Include* include) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (include) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      include = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, include, submessage_arena);
    }
    set_has_include();
    type_.include_ = include;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.include)
}
void TreeNode::clear_include() {
  if (has_include()) {
    delete type_.include_;
    clear_has_type();
  }
}
void TreeNode::set_allocated_settings(::buffers::resources::Settings* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    set_has_settings();
    type_.settings_ = settings;
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.settings)
}
void TreeNode::clear_settings() {
  if (has_settings()) {
    delete type_.settings_;
    clear_has_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeNode::kFolderFieldNumber;
const int TreeNode::kSpriteFieldNumber;
const int TreeNode::kSoundFieldNumber;
const int TreeNode::kBackgroundFieldNumber;
const int TreeNode::kPathFieldNumber;
const int TreeNode::kScriptFieldNumber;
const int TreeNode::kShaderFieldNumber;
const int TreeNode::kFontFieldNumber;
const int TreeNode::kTimelineFieldNumber;
const int TreeNode::kObjectFieldNumber;
const int TreeNode::kRoomFieldNumber;
const int TreeNode::kIncludeFieldNumber;
const int TreeNode::kSettingsFieldNumber;
const int TreeNode::kNameFieldNumber;
const int TreeNode::kChildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeNode::TreeNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_treenode_2eproto::scc_info_TreeNode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.TreeNode)
}
TreeNode::TreeNode(const TreeNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      child_(from.child_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_type();
  switch (from.type_case()) {
    case kFolder: {
      set_folder(from.folder());
      break;
    }
    case kSprite: {
      mutable_sprite()->::buffers::resources::Sprite::MergeFrom(from.sprite());
      break;
    }
    case kSound: {
      mutable_sound()->::buffers::resources::Sound::MergeFrom(from.sound());
      break;
    }
    case kBackground: {
      mutable_background()->::buffers::resources::Background::MergeFrom(from.background());
      break;
    }
    case kPath: {
      mutable_path()->::buffers::resources::Path::MergeFrom(from.path());
      break;
    }
    case kScript: {
      mutable_script()->::buffers::resources::Script::MergeFrom(from.script());
      break;
    }
    case kShader: {
      mutable_shader()->::buffers::resources::Shader::MergeFrom(from.shader());
      break;
    }
    case kFont: {
      mutable_font()->::buffers::resources::Font::MergeFrom(from.font());
      break;
    }
    case kTimeline: {
      mutable_timeline()->::buffers::resources::Timeline::MergeFrom(from.timeline());
      break;
    }
    case kObject: {
      mutable_object()->::buffers::resources::Object::MergeFrom(from.object());
      break;
    }
    case kRoom: {
      mutable_room()->::buffers::resources::Room::MergeFrom(from.room());
      break;
    }
    case kInclude: {
      mutable_include()->::buffers::resources::Include::MergeFrom(from.include());
      break;
    }
    case kSettings: {
      mutable_settings()->::buffers::resources::Settings::MergeFrom(from.settings());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:buffers.TreeNode)
}

void TreeNode::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:buffers.TreeNode)
  SharedDtor();
}

void TreeNode::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_type()) {
    clear_type();
  }
}

void TreeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TreeNode::descriptor() {
  ::protobuf_treenode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_treenode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeNode& TreeNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_treenode_2eproto::scc_info_TreeNode.base);
  return *internal_default_instance();
}


void TreeNode::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:buffers.TreeNode)
  switch (type_case()) {
    case kFolder: {
      // No need to clear
      break;
    }
    case kSprite: {
      delete type_.sprite_;
      break;
    }
    case kSound: {
      delete type_.sound_;
      break;
    }
    case kBackground: {
      delete type_.background_;
      break;
    }
    case kPath: {
      delete type_.path_;
      break;
    }
    case kScript: {
      delete type_.script_;
      break;
    }
    case kShader: {
      delete type_.shader_;
      break;
    }
    case kFont: {
      delete type_.font_;
      break;
    }
    case kTimeline: {
      delete type_.timeline_;
      break;
    }
    case kObject: {
      delete type_.object_;
      break;
    }
    case kRoom: {
      delete type_.room_;
      break;
    }
    case kInclude: {
      delete type_.include_;
      break;
    }
    case kSettings: {
      delete type_.settings_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.TreeNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool folder = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_.folder_)));
          set_has_folder();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Sprite sprite = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sprite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Sound sound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Background background = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Path path = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Script script = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_script()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Shader shader = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Font font = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_font()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Timeline timeline = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Object object = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Room room = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Include include = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_include()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Settings settings = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.TreeNode.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .buffers.TreeNode child = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_child()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.TreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.TreeNode)
  return false;
#undef DO_
}

void TreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_case()) {
    case kFolder:
      ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->folder(), output);
      break;
    case kSprite:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_sprite(), output);
      break;
    case kSound:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_sound(), output);
      break;
    case kBackground:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_background(), output);
      break;
    case kPath:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_path(), output);
      break;
    case kScript:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_script(), output);
      break;
    case kShader:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_shader(), output);
      break;
    case kFont:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_font(), output);
      break;
    case kTimeline:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_timeline(), output);
      break;
    case kObject:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_object(), output);
      break;
    case kRoom:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_room(), output);
      break;
    case kInclude:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_include(), output);
      break;
    case kSettings:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_settings(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional string name = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.TreeNode.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->name(), output);
  }

  // repeated .buffers.TreeNode child = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->child(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.TreeNode)
}

::google::protobuf::uint8* TreeNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_case()) {
    case kFolder:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->folder(), target);
      break;
    case kSprite:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_sprite(), deterministic, target);
      break;
    case kSound:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_sound(), deterministic, target);
      break;
    case kBackground:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_background(), deterministic, target);
      break;
    case kPath:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_path(), deterministic, target);
      break;
    case kScript:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_script(), deterministic, target);
      break;
    case kShader:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_shader(), deterministic, target);
      break;
    case kFont:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_font(), deterministic, target);
      break;
    case kTimeline:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_timeline(), deterministic, target);
      break;
    case kObject:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_object(), deterministic, target);
      break;
    case kRoom:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_room(), deterministic, target);
      break;
    case kInclude:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_include(), deterministic, target);
      break;
    case kSettings:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_settings(), deterministic, target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional string name = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.TreeNode.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->name(), target);
  }

  // repeated .buffers.TreeNode child = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->child(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.TreeNode)
  return target;
}

size_t TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.TreeNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .buffers.TreeNode child = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->child_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->child(static_cast<int>(i)));
    }
  }

  // optional string name = 16;
  if (has_name()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (type_case()) {
    // optional bool folder = 1;
    case kFolder: {
      total_size += 1 + 1;
      break;
    }
    // optional .buffers.resources.Sprite sprite = 2;
    case kSprite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.sprite_);
      break;
    }
    // optional .buffers.resources.Sound sound = 3;
    case kSound: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.sound_);
      break;
    }
    // optional .buffers.resources.Background background = 4;
    case kBackground: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.background_);
      break;
    }
    // optional .buffers.resources.Path path = 5;
    case kPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.path_);
      break;
    }
    // optional .buffers.resources.Script script = 6;
    case kScript: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.script_);
      break;
    }
    // optional .buffers.resources.Shader shader = 7;
    case kShader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.shader_);
      break;
    }
    // optional .buffers.resources.Font font = 8;
    case kFont: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.font_);
      break;
    }
    // optional .buffers.resources.Timeline timeline = 9;
    case kTimeline: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.timeline_);
      break;
    }
    // optional .buffers.resources.Object object = 10;
    case kObject: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.object_);
      break;
    }
    // optional .buffers.resources.Room room = 11;
    case kRoom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.room_);
      break;
    }
    // optional .buffers.resources.Include include = 12;
    case kInclude: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.include_);
      break;
    }
    // optional .buffers.resources.Settings settings = 13;
    case kSettings: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.settings_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.TreeNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.TreeNode)
    MergeFrom(*source);
  }
}

void TreeNode::MergeFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_.MergeFrom(from.child_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.type_case()) {
    case kFolder: {
      set_folder(from.folder());
      break;
    }
    case kSprite: {
      mutable_sprite()->::buffers::resources::Sprite::MergeFrom(from.sprite());
      break;
    }
    case kSound: {
      mutable_sound()->::buffers::resources::Sound::MergeFrom(from.sound());
      break;
    }
    case kBackground: {
      mutable_background()->::buffers::resources::Background::MergeFrom(from.background());
      break;
    }
    case kPath: {
      mutable_path()->::buffers::resources::Path::MergeFrom(from.path());
      break;
    }
    case kScript: {
      mutable_script()->::buffers::resources::Script::MergeFrom(from.script());
      break;
    }
    case kShader: {
      mutable_shader()->::buffers::resources::Shader::MergeFrom(from.shader());
      break;
    }
    case kFont: {
      mutable_font()->::buffers::resources::Font::MergeFrom(from.font());
      break;
    }
    case kTimeline: {
      mutable_timeline()->::buffers::resources::Timeline::MergeFrom(from.timeline());
      break;
    }
    case kObject: {
      mutable_object()->::buffers::resources::Object::MergeFrom(from.object());
      break;
    }
    case kRoom: {
      mutable_room()->::buffers::resources::Room::MergeFrom(from.room());
      break;
    }
    case kInclude: {
      mutable_include()->::buffers::resources::Include::MergeFrom(from.include());
      break;
    }
    case kSettings: {
      mutable_settings()->::buffers::resources::Settings::MergeFrom(from.settings());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void TreeNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {
  return true;
}

void TreeNode::Swap(TreeNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TreeNode::InternalSwap(TreeNode* other) {
  using std::swap;
  CastToBase(&child_)->InternalSwap(CastToBase(&other->child_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TreeNode::GetMetadata() const {
  protobuf_treenode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_treenode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace buffers
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::buffers::TreeNode* Arena::CreateMaybeMessage< ::buffers::TreeNode >(Arena* arena) {
  return Arena::CreateInternal< ::buffers::TreeNode >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
