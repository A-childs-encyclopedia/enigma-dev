// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Settings.proto

#include "Settings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Settings_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Settings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_API;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Settings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Compiler;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Settings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Deployment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Settings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_General;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Settings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Graphics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Settings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Settings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Installer;
}  // namespace protobuf_Settings_2eproto
namespace buffers {
namespace resources {
class SettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Settings>
      _instance;
} _Settings_default_instance_;
class APIDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<API>
      _instance;
} _API_default_instance_;
class CompilerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Compiler>
      _instance;
} _Compiler_default_instance_;
class GeneralDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<General>
      _instance;
} _General_default_instance_;
class GraphicsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Graphics>
      _instance;
} _Graphics_default_instance_;
class InfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Info>
      _instance;
} _Info_default_instance_;
class InstallerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Installer>
      _instance;
} _Installer_default_instance_;
class DeploymentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Deployment>
      _instance;
} _Deployment_default_instance_;
}  // namespace resources
}  // namespace buffers
namespace protobuf_Settings_2eproto {
static void InitDefaultsSettings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buffers::resources::_Settings_default_instance_;
    new (ptr) ::buffers::resources::Settings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::resources::Settings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Settings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsSettings}, {
      &protobuf_Settings_2eproto::scc_info_API.base,
      &protobuf_Settings_2eproto::scc_info_Compiler.base,
      &protobuf_Settings_2eproto::scc_info_General.base,
      &protobuf_Settings_2eproto::scc_info_Graphics.base,
      &protobuf_Settings_2eproto::scc_info_Info.base,
      &protobuf_Settings_2eproto::scc_info_Installer.base,
      &protobuf_Settings_2eproto::scc_info_Deployment.base,}};

static void InitDefaultsAPI() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buffers::resources::_API_default_instance_;
    new (ptr) ::buffers::resources::API();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::resources::API::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_API =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAPI}, {}};

static void InitDefaultsCompiler() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buffers::resources::_Compiler_default_instance_;
    new (ptr) ::buffers::resources::Compiler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::resources::Compiler::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Compiler =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCompiler}, {}};

static void InitDefaultsGeneral() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buffers::resources::_General_default_instance_;
    new (ptr) ::buffers::resources::General();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::resources::General::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_General =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeneral}, {}};

static void InitDefaultsGraphics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buffers::resources::_Graphics_default_instance_;
    new (ptr) ::buffers::resources::Graphics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::resources::Graphics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Graphics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGraphics}, {}};

static void InitDefaultsInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buffers::resources::_Info_default_instance_;
    new (ptr) ::buffers::resources::Info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::resources::Info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInfo}, {}};

static void InitDefaultsInstaller() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buffers::resources::_Installer_default_instance_;
    new (ptr) ::buffers::resources::Installer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::resources::Installer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Installer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInstaller}, {}};

static void InitDefaultsDeployment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::buffers::resources::_Deployment_default_instance_;
    new (ptr) ::buffers::resources::Deployment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::resources::Deployment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Deployment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeployment}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Settings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_API.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Compiler.base);
  ::google::protobuf::internal::InitSCC(&scc_info_General.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Graphics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Installer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Deployment.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Settings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Settings, api_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Settings, compiler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Settings, general_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Settings, graphics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Settings, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Settings, installer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Settings, deployment_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::API, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::API, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::API, target_audio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::API, target_platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::API, target_compiler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::API, target_graphics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::API, target_widgets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::API, target_collision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::API, target_network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::API, extensions_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, inherit_strings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, inherit_escapes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, inherit_increment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, inherit_equivalence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, inherit_literals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, inherit_negatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, compliance_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, keyword_blacklist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, eobjs_directory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, codegen_directory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, inherit_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, automatic_semicolons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, graphics_angular_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, graphics_scalar_precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, collision_angular_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, collision_scalar_precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, audio_angular_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Compiler, audio_scalar_precision_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  0,
  1,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, game_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, color_outside_room_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, version_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, version_minor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, version_release_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, version_build_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, company_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, product_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, copyright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, show_cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, game_icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, splash_screen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, show_splash_screen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, sleep_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, save_data_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::General, menu_dock_),
  9,
  0,
  10,
  1,
  11,
  12,
  13,
  14,
  2,
  3,
  4,
  5,
  15,
  6,
  7,
  16,
  18,
  8,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, start_in_fullscreen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, allow_fullscreen_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, smooth_colors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, force_software_vertex_processing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, freeze_on_lose_focus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, use_synchronization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, window_sizeable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, window_showborder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, window_showicons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, window_stayontop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, window_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, create_textures_on_demand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, alternate_synchronization_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, vertex_buffer_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, texture_page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Graphics, enable_hidpi_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  10,
  8,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Info, author_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Info, author_email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Info, website_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Info, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Info, last_changed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Info, information_),
  0,
  1,
  2,
  3,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Installer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Installer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Installer, finished_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Installer, header_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Installer, script_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Installer, license_agreement_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Deployment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Deployment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Deployment, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Deployment, app_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Deployment, team_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Deployment, enable_appstore_build_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Deployment, allow_incoming_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Deployment, allow_outgoing_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Deployment, app_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Deployment, signing_identity_),
  0,
  1,
  2,
  5,
  6,
  7,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::buffers::resources::Settings)},
  { 19, 32, sizeof(::buffers::resources::API)},
  { 40, 63, sizeof(::buffers::resources::Compiler)},
  { 81, 105, sizeof(::buffers::resources::General)},
  { 124, 145, sizeof(::buffers::resources::Graphics)},
  { 161, 172, sizeof(::buffers::resources::Info)},
  { 178, 187, sizeof(::buffers::resources::Installer)},
  { 191, 204, sizeof(::buffers::resources::Deployment)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::resources::_Settings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::resources::_API_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::resources::_Compiler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::resources::_General_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::resources::_Graphics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::resources::_Info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::resources::_Installer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::resources::_Deployment_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Settings.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016Settings.proto\022\021buffers.resources\032\ropt"
      "ions.proto\"\305\002\n\010Settings\022#\n\003api\030\001 \001(\0132\026.b"
      "uffers.resources.API\022-\n\010compiler\030\002 \001(\0132\033"
      ".buffers.resources.Compiler\022+\n\007general\030\003"
      " \001(\0132\032.buffers.resources.General\022-\n\010grap"
      "hics\030\004 \001(\0132\033.buffers.resources.Graphics\022"
      "%\n\004info\030\005 \001(\0132\027.buffers.resources.Info\022/"
      "\n\tinstaller\030\006 \001(\0132\034.buffers.resources.In"
      "staller\0221\n\ndeployment\030\007 \001(\0132\035.buffers.re"
      "sources.Deployment\"\304\001\n\003API\022\024\n\014target_aud"
      "io\030\001 \001(\t\022\027\n\017target_platform\030\002 \001(\t\022\027\n\017tar"
      "get_compiler\030\003 \001(\t\022\027\n\017target_graphics\030\004 "
      "\001(\t\022\026\n\016target_widgets\030\005 \001(\t\022\030\n\020target_co"
      "llision\030\006 \001(\t\022\026\n\016target_network\030\007 \001(\t\022\022\n"
      "\nextensions\030\010 \003(\t\"\212\004\n\010Compiler\022\027\n\017inheri"
      "t_strings\030\001 \001(\r\022\027\n\017inherit_escapes\030\002 \001(\r"
      "\022\031\n\021inherit_increment\030\003 \001(\r\022\033\n\023inherit_e"
      "quivalence\030\004 \001(\r\022\030\n\020inherit_literals\030\005 \001"
      "(\r\022\031\n\021inherit_negatives\030\006 \001(\r\022\027\n\017complia"
      "nce_mode\030\007 \001(\r\022\031\n\021keyword_blacklist\030\010 \003("
      "\t\022\027\n\017eobjs_directory\030\t \001(\t\022\031\n\021codegen_di"
      "rectory\030\n \001(\t\022\027\n\017inherit_objects\030\013 \001(\010\022\034"
      "\n\024automatic_semicolons\030\014 \001(\010\022\035\n\025graphics"
      "_angular_unit\030\r \001(\r\022!\n\031graphics_scalar_p"
      "recision\030\016 \001(\r\022\036\n\026collision_angular_unit"
      "\030\017 \001(\r\022\"\n\032collision_scalar_precision\030\020 \001"
      "(\r\022\032\n\022audio_angular_unit\030\021 \001(\r\022\036\n\026audio_"
      "scalar_precision\030\022 \001(\r\"\272\007\n\007General\022\"\n\007ga"
      "me_id\030\001 \001(\004B\021\222\265\030\roption_gameid\022&\n\tgame_g"
      "uid\030\002 \001(\tB\023\222\265\030\017option_gameguid\0229\n\031color_"
      "outside_room_region\030\003 \001(\005B\026\222\265\030\022option_wi"
      "ndowcolor\022-\n\014display_name\030\004 \001(\tB\027\222\265\030\023opt"
      "ion_display_name\022/\n\rversion_major\030\005 \001(\rB"
      "\030\222\265\030\024option_version_major\022/\n\rversion_min"
      "or\030\006 \001(\rB\030\222\265\030\024option_version_minor\0223\n\017ve"
      "rsion_release\030\007 \001(\rB\032\222\265\030\026option_version_"
      "release\022/\n\rversion_build\030\010 \001(\rB\030\222\265\030\024opti"
      "on_version_build\022+\n\007company\030\t \001(\tB\032\222\265\030\026o"
      "ption_version_company\022+\n\007product\030\n \001(\tB\032"
      "\222\265\030\026option_version_product\022/\n\tcopyright\030"
      "\013 \001(\tB\034\222\265\030\030option_version_copyright\0223\n\013d"
      "escription\030\014 \001(\tB\036\222\265\030\032option_version_des"
      "cription\022*\n\013show_cursor\030\r \001(\010B\025\222\265\030\021optio"
      "n_showcursor\022/\n\tgame_icon\030\016 \001(\tB\034\222\265\030\030opt"
      "ion_windows_game_icon\0227\n\rsplash_screen\030\017"
      " \001(\tB \222\265\030\034option_windows_splash_screen\0229"
      "\n\022show_splash_screen\030\020 \001(\010B\035\222\265\030\031option_w"
      "indows_use_splash\0225\n\014sleep_margin\030\021 \001(\rB"
      "\037\222\265\030\033option_windows_sleep_margin\022<\n\022save"
      "_data_location\030\022 \001(\tB \222\265\030\034option_windows"
      "_save_location\022+\n\tmenu_dock\030\023 \001(\010B\030\222\265\030\024o"
      "ption_mac_menu_dock\"\340\007\n\010Graphics\0222\n\023star"
      "t_in_fullscreen\030\001 \001(\010B\025\222\265\030\021option_fullsc"
      "reen\0225\n\027allow_fullscreen_change\030\002 \001(\010B\024\222"
      "\265\030\020option_screenkey\022-\n\rsmooth_colors\030\003 \001"
      "(\010B\026\222\265\030\022option_interpolate\022.\n force_soft"
      "ware_vertex_processing\030\004 \001(\010B\004\222\265\030\000\022/\n\024fr"
      "eeze_on_lose_focus\030\005 \001(\010B\021\222\265\030\roption_fre"
      "eze\022!\n\023use_synchronization\030\006 \001(\010B\004\222\265\030\000\022,"
      "\n\017window_sizeable\030\007 \001(\010B\023\222\265\030\017option_size"
      "able\022.\n\021window_showborder\030\010 \001(\010B\023\222\265\030\017opt"
      "ion_noborder\022.\n\020window_showicons\030\t \001(\010B\024"
      "\222\265\030\020option_nobuttons\022.\n\020window_stayontop"
      "\030\n \001(\010B\024\222\265\030\020option_stayontop\022&\n\014window_s"
      "cale\030\013 \001(\001B\020\222\265\030\014option_scale\022O\n\031create_t"
      "extures_on_demand\030\014 \001(\010B,\222\265\030(option_wind"
      "ows_create_textures_on_demand\022R\n alterna"
      "te_synchronization_method\030\r \001(\010B(\222\265\030$opt"
      "ion_windows_alternate_sync_method\022v\n\024ver"
      "tex_buffer_method\030\016 \001(\0162..buffers.resour"
      "ces.Graphics.VertexBufferMethodB(\222\265\030$opt"
      "ion_windows_vertex_buffer_method2\022:\n\021tex"
      "ture_page_size\030\017 \001(\rB\037\222\265\030\033option_windows"
      "_texture_page\0222\n\014enable_hidpi\030\020 \001(\010B\034\222\265\030"
      "\030option_mac_enable_retina\"C\n\022VertexBuffe"
      "rMethod\022\010\n\004FAST\020\000\022\016\n\nCOMPATIBLE\020\001\022\023\n\017MOS"
      "T_COMPATIBLE\020\002\"\223\002\n\004Info\022&\n\013author_name\030\001"
      " \001(\tB\021\222\265\030\roption_author\0227\n\014author_email\030"
      "\002 \001(\tB!\222\265\030\035option_linux_maintainer_email"
      "\022*\n\007website\030\003 \001(\tB\031\222\265\030\025option_linux_home"
      "page\022#\n\007version\030\004 \001(\tB\022\222\265\030\016option_versio"
      "n\022,\n\014last_changed\030\005 \001(\rB\026\222\265\030\022option_last"
      "changed\022+\n\013information\030\006 \001(\tB\026\222\265\030\022option"
      "_information\"\344\001\n\tInstaller\022:\n\016finished_i"
      "mage\030\001 \001(\tB\"\222\265\030\036option_windows_runner_fi"
      "nished\0226\n\014header_image\030\002 \001(\tB \222\265\030\034option"
      "_windows_runner_header\022,\n\006script\030\003 \001(\tB\034"
      "\222\265\030\030option_windows_nsis_file\0225\n\021license_"
      "agreement\030\004 \001(\tB\032\222\265\030\026option_windows_lice"
      "nse\"\331\003\n\nDeployment\022%\n\006app_id\030\001 \001(\tB\025\222\265\030\021"
      "option_mac_app_id\022-\n\napp_output\030\002 \001(\tB\031\222"
      "\265\030\025option_mac_output_dir\022/\n\017team_identif"
      "ier\030\003 \001(\tB\026\222\265\030\022option_mac_team_id\022>\n\025ena"
      "ble_appstore_build\030\004 \001(\010B\037\222\265\030\033option_mac"
      "_create_app_store\022J\n\032allow_incoming_conn"
      "ections\030\005 \001(\010B&\222\265\030\"option_mac_appstore_i"
      "ncoming_allow\022J\n\032allow_outgoing_connecti"
      "ons\030\006 \001(\010B&\222\265\030\"option_mac_appstore_outgo"
      "ing_allow\0221\n\014app_category\030\007 \001(\tB\033\222\265\030\027opt"
      "ion_mac_app_category\0229\n\020signing_identity"
      "\030\010 \001(\tB\037\222\265\030\033option_mac_signing_identity"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4039);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Settings.proto", &protobuf_RegisterTypes);
  ::protobuf_options_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Settings_2eproto
namespace buffers {
namespace resources {
const ::google::protobuf::EnumDescriptor* Graphics_VertexBufferMethod_descriptor() {
  protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Settings_2eproto::file_level_enum_descriptors[0];
}
bool Graphics_VertexBufferMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Graphics_VertexBufferMethod Graphics::FAST;
const Graphics_VertexBufferMethod Graphics::COMPATIBLE;
const Graphics_VertexBufferMethod Graphics::MOST_COMPATIBLE;
const Graphics_VertexBufferMethod Graphics::VertexBufferMethod_MIN;
const Graphics_VertexBufferMethod Graphics::VertexBufferMethod_MAX;
const int Graphics::VertexBufferMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Settings::InitAsDefaultInstance() {
  ::buffers::resources::_Settings_default_instance_._instance.get_mutable()->api_ = const_cast< ::buffers::resources::API*>(
      ::buffers::resources::API::internal_default_instance());
  ::buffers::resources::_Settings_default_instance_._instance.get_mutable()->compiler_ = const_cast< ::buffers::resources::Compiler*>(
      ::buffers::resources::Compiler::internal_default_instance());
  ::buffers::resources::_Settings_default_instance_._instance.get_mutable()->general_ = const_cast< ::buffers::resources::General*>(
      ::buffers::resources::General::internal_default_instance());
  ::buffers::resources::_Settings_default_instance_._instance.get_mutable()->graphics_ = const_cast< ::buffers::resources::Graphics*>(
      ::buffers::resources::Graphics::internal_default_instance());
  ::buffers::resources::_Settings_default_instance_._instance.get_mutable()->info_ = const_cast< ::buffers::resources::Info*>(
      ::buffers::resources::Info::internal_default_instance());
  ::buffers::resources::_Settings_default_instance_._instance.get_mutable()->installer_ = const_cast< ::buffers::resources::Installer*>(
      ::buffers::resources::Installer::internal_default_instance());
  ::buffers::resources::_Settings_default_instance_._instance.get_mutable()->deployment_ = const_cast< ::buffers::resources::Deployment*>(
      ::buffers::resources::Deployment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Settings::kApiFieldNumber;
const int Settings::kCompilerFieldNumber;
const int Settings::kGeneralFieldNumber;
const int Settings::kGraphicsFieldNumber;
const int Settings::kInfoFieldNumber;
const int Settings::kInstallerFieldNumber;
const int Settings::kDeploymentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Settings::Settings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Settings_2eproto::scc_info_Settings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Settings)
}
Settings::Settings(const Settings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_api()) {
    api_ = new ::buffers::resources::API(*from.api_);
  } else {
    api_ = NULL;
  }
  if (from.has_compiler()) {
    compiler_ = new ::buffers::resources::Compiler(*from.compiler_);
  } else {
    compiler_ = NULL;
  }
  if (from.has_general()) {
    general_ = new ::buffers::resources::General(*from.general_);
  } else {
    general_ = NULL;
  }
  if (from.has_graphics()) {
    graphics_ = new ::buffers::resources::Graphics(*from.graphics_);
  } else {
    graphics_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::buffers::resources::Info(*from.info_);
  } else {
    info_ = NULL;
  }
  if (from.has_installer()) {
    installer_ = new ::buffers::resources::Installer(*from.installer_);
  } else {
    installer_ = NULL;
  }
  if (from.has_deployment()) {
    deployment_ = new ::buffers::resources::Deployment(*from.deployment_);
  } else {
    deployment_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Settings)
}

void Settings::SharedCtor() {
  ::memset(&api_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deployment_) -
      reinterpret_cast<char*>(&api_)) + sizeof(deployment_));
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:buffers.resources.Settings)
  SharedDtor();
}

void Settings::SharedDtor() {
  if (this != internal_default_instance()) delete api_;
  if (this != internal_default_instance()) delete compiler_;
  if (this != internal_default_instance()) delete general_;
  if (this != internal_default_instance()) delete graphics_;
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete installer_;
  if (this != internal_default_instance()) delete deployment_;
}

void Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Settings::descriptor() {
  ::protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Settings& Settings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Settings_2eproto::scc_info_Settings.base);
  return *internal_default_instance();
}


void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(api_ != NULL);
      api_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(compiler_ != NULL);
      compiler_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(general_ != NULL);
      general_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(graphics_ != NULL);
      graphics_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(installer_ != NULL);
      installer_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(deployment_ != NULL);
      deployment_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Settings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .buffers.resources.API api = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_api()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Compiler compiler = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compiler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.General general = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_general()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Graphics graphics = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_graphics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Info info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Installer installer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_installer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Deployment deployment = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deployment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Settings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Settings)
  return false;
#undef DO_
}

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .buffers.resources.API api = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_api(), output);
  }

  // optional .buffers.resources.Compiler compiler = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_compiler(), output);
  }

  // optional .buffers.resources.General general = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_general(), output);
  }

  // optional .buffers.resources.Graphics graphics = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_graphics(), output);
  }

  // optional .buffers.resources.Info info = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_info(), output);
  }

  // optional .buffers.resources.Installer installer = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_installer(), output);
  }

  // optional .buffers.resources.Deployment deployment = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_deployment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Settings)
}

::google::protobuf::uint8* Settings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .buffers.resources.API api = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_api(), deterministic, target);
  }

  // optional .buffers.resources.Compiler compiler = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_compiler(), deterministic, target);
  }

  // optional .buffers.resources.General general = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_general(), deterministic, target);
  }

  // optional .buffers.resources.Graphics graphics = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_graphics(), deterministic, target);
  }

  // optional .buffers.resources.Info info = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_info(), deterministic, target);
  }

  // optional .buffers.resources.Installer installer = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_installer(), deterministic, target);
  }

  // optional .buffers.resources.Deployment deployment = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_deployment(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Settings)
  return target;
}

size_t Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Settings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .buffers.resources.API api = 1;
    if (has_api()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *api_);
    }

    // optional .buffers.resources.Compiler compiler = 2;
    if (has_compiler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *compiler_);
    }

    // optional .buffers.resources.General general = 3;
    if (has_general()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *general_);
    }

    // optional .buffers.resources.Graphics graphics = 4;
    if (has_graphics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *graphics_);
    }

    // optional .buffers.resources.Info info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .buffers.resources.Installer installer = 6;
    if (has_installer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *installer_);
    }

    // optional .buffers.resources.Deployment deployment = 7;
    if (has_deployment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *deployment_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const Settings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Settings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Settings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Settings)
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_api()->::buffers::resources::API::MergeFrom(from.api());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_compiler()->::buffers::resources::Compiler::MergeFrom(from.compiler());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_general()->::buffers::resources::General::MergeFrom(from.general());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_graphics()->::buffers::resources::Graphics::MergeFrom(from.graphics());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_info()->::buffers::resources::Info::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_installer()->::buffers::resources::Installer::MergeFrom(from.installer());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_deployment()->::buffers::resources::Deployment::MergeFrom(from.deployment());
    }
  }
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  return true;
}

void Settings::Swap(Settings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Settings::InternalSwap(Settings* other) {
  using std::swap;
  swap(api_, other->api_);
  swap(compiler_, other->compiler_);
  swap(general_, other->general_);
  swap(graphics_, other->graphics_);
  swap(info_, other->info_);
  swap(installer_, other->installer_);
  swap(deployment_, other->deployment_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void API::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int API::kTargetAudioFieldNumber;
const int API::kTargetPlatformFieldNumber;
const int API::kTargetCompilerFieldNumber;
const int API::kTargetGraphicsFieldNumber;
const int API::kTargetWidgetsFieldNumber;
const int API::kTargetCollisionFieldNumber;
const int API::kTargetNetworkFieldNumber;
const int API::kExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

API::API()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Settings_2eproto::scc_info_API.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.API)
}
API::API(const API& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      extensions_(from.extensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_audio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_audio()) {
    target_audio_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_audio_);
  }
  target_platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_platform()) {
    target_platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_platform_);
  }
  target_compiler_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_compiler()) {
    target_compiler_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_compiler_);
  }
  target_graphics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_graphics()) {
    target_graphics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_graphics_);
  }
  target_widgets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_widgets()) {
    target_widgets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_widgets_);
  }
  target_collision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_collision()) {
    target_collision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_collision_);
  }
  target_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_network()) {
    target_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_network_);
  }
  // @@protoc_insertion_point(copy_constructor:buffers.resources.API)
}

void API::SharedCtor() {
  target_audio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_compiler_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_graphics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_widgets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_collision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

API::~API() {
  // @@protoc_insertion_point(destructor:buffers.resources.API)
  SharedDtor();
}

void API::SharedDtor() {
  target_audio_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_compiler_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_graphics_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_widgets_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_collision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void API::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* API::descriptor() {
  ::protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const API& API::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Settings_2eproto::scc_info_API.base);
  return *internal_default_instance();
}


void API::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.API)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      target_audio_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      target_platform_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      target_compiler_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      target_graphics_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      target_widgets_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      target_collision_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      target_network_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool API::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.API)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string target_audio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_audio()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_audio().data(), static_cast<int>(this->target_audio().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.API.target_audio");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_platform = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_platform().data(), static_cast<int>(this->target_platform().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.API.target_platform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_compiler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_compiler()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_compiler().data(), static_cast<int>(this->target_compiler().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.API.target_compiler");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_graphics = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_graphics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_graphics().data(), static_cast<int>(this->target_graphics().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.API.target_graphics");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_widgets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_widgets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_widgets().data(), static_cast<int>(this->target_widgets().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.API.target_widgets");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_collision = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_collision()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_collision().data(), static_cast<int>(this->target_collision().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.API.target_collision");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_network = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_network().data(), static_cast<int>(this->target_network().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.API.target_network");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string extensions = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_extensions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extensions(this->extensions_size() - 1).data(),
            static_cast<int>(this->extensions(this->extensions_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.API.extensions");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.API)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.API)
  return false;
#undef DO_
}

void API::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.API)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string target_audio = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_audio().data(), static_cast<int>(this->target_audio().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_audio");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target_audio(), output);
  }

  // optional string target_platform = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_platform().data(), static_cast<int>(this->target_platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->target_platform(), output);
  }

  // optional string target_compiler = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_compiler().data(), static_cast<int>(this->target_compiler().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_compiler");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target_compiler(), output);
  }

  // optional string target_graphics = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_graphics().data(), static_cast<int>(this->target_graphics().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_graphics");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->target_graphics(), output);
  }

  // optional string target_widgets = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_widgets().data(), static_cast<int>(this->target_widgets().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_widgets");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->target_widgets(), output);
  }

  // optional string target_collision = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_collision().data(), static_cast<int>(this->target_collision().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_collision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->target_collision(), output);
  }

  // optional string target_network = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_network().data(), static_cast<int>(this->target_network().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->target_network(), output);
  }

  // repeated string extensions = 8;
  for (int i = 0, n = this->extensions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extensions(i).data(), static_cast<int>(this->extensions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.extensions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->extensions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.API)
}

::google::protobuf::uint8* API::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.API)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string target_audio = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_audio().data(), static_cast<int>(this->target_audio().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_audio");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target_audio(), target);
  }

  // optional string target_platform = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_platform().data(), static_cast<int>(this->target_platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target_platform(), target);
  }

  // optional string target_compiler = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_compiler().data(), static_cast<int>(this->target_compiler().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_compiler");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target_compiler(), target);
  }

  // optional string target_graphics = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_graphics().data(), static_cast<int>(this->target_graphics().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_graphics");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target_graphics(), target);
  }

  // optional string target_widgets = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_widgets().data(), static_cast<int>(this->target_widgets().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_widgets");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->target_widgets(), target);
  }

  // optional string target_collision = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_collision().data(), static_cast<int>(this->target_collision().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_collision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->target_collision(), target);
  }

  // optional string target_network = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_network().data(), static_cast<int>(this->target_network().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.target_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->target_network(), target);
  }

  // repeated string extensions = 8;
  for (int i = 0, n = this->extensions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extensions(i).data(), static_cast<int>(this->extensions(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.API.extensions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->extensions(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.API)
  return target;
}

size_t API::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.API)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string extensions = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->extensions_size());
  for (int i = 0, n = this->extensions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->extensions(i));
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string target_audio = 1;
    if (has_target_audio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_audio());
    }

    // optional string target_platform = 2;
    if (has_target_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_platform());
    }

    // optional string target_compiler = 3;
    if (has_target_compiler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_compiler());
    }

    // optional string target_graphics = 4;
    if (has_target_graphics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_graphics());
    }

    // optional string target_widgets = 5;
    if (has_target_widgets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_widgets());
    }

    // optional string target_collision = 6;
    if (has_target_collision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_collision());
    }

    // optional string target_network = 7;
    if (has_target_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_network());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void API::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.API)
  GOOGLE_DCHECK_NE(&from, this);
  const API* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const API>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.API)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.API)
    MergeFrom(*source);
  }
}

void API::MergeFrom(const API& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.API)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extensions_.MergeFrom(from.extensions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_target_audio();
      target_audio_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_audio_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_target_platform();
      target_platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_platform_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_target_compiler();
      target_compiler_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_compiler_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_target_graphics();
      target_graphics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_graphics_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_target_widgets();
      target_widgets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_widgets_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_target_collision();
      target_collision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_collision_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_target_network();
      target_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_network_);
    }
  }
}

void API::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.API)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void API::CopyFrom(const API& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.API)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool API::IsInitialized() const {
  return true;
}

void API::Swap(API* other) {
  if (other == this) return;
  InternalSwap(other);
}
void API::InternalSwap(API* other) {
  using std::swap;
  extensions_.InternalSwap(CastToBase(&other->extensions_));
  target_audio_.Swap(&other->target_audio_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_platform_.Swap(&other->target_platform_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_compiler_.Swap(&other->target_compiler_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_graphics_.Swap(&other->target_graphics_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_widgets_.Swap(&other->target_widgets_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_collision_.Swap(&other->target_collision_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_network_.Swap(&other->target_network_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata API::GetMetadata() const {
  protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Compiler::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Compiler::kInheritStringsFieldNumber;
const int Compiler::kInheritEscapesFieldNumber;
const int Compiler::kInheritIncrementFieldNumber;
const int Compiler::kInheritEquivalenceFieldNumber;
const int Compiler::kInheritLiteralsFieldNumber;
const int Compiler::kInheritNegativesFieldNumber;
const int Compiler::kComplianceModeFieldNumber;
const int Compiler::kKeywordBlacklistFieldNumber;
const int Compiler::kEobjsDirectoryFieldNumber;
const int Compiler::kCodegenDirectoryFieldNumber;
const int Compiler::kInheritObjectsFieldNumber;
const int Compiler::kAutomaticSemicolonsFieldNumber;
const int Compiler::kGraphicsAngularUnitFieldNumber;
const int Compiler::kGraphicsScalarPrecisionFieldNumber;
const int Compiler::kCollisionAngularUnitFieldNumber;
const int Compiler::kCollisionScalarPrecisionFieldNumber;
const int Compiler::kAudioAngularUnitFieldNumber;
const int Compiler::kAudioScalarPrecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Compiler::Compiler()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Settings_2eproto::scc_info_Compiler.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Compiler)
}
Compiler::Compiler(const Compiler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      keyword_blacklist_(from.keyword_blacklist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eobjs_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_eobjs_directory()) {
    eobjs_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eobjs_directory_);
  }
  codegen_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_codegen_directory()) {
    codegen_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codegen_directory_);
  }
  ::memcpy(&inherit_strings_, &from.inherit_strings_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_scalar_precision_) -
    reinterpret_cast<char*>(&inherit_strings_)) + sizeof(audio_scalar_precision_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Compiler)
}

void Compiler::SharedCtor() {
  eobjs_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codegen_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inherit_strings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_scalar_precision_) -
      reinterpret_cast<char*>(&inherit_strings_)) + sizeof(audio_scalar_precision_));
}

Compiler::~Compiler() {
  // @@protoc_insertion_point(destructor:buffers.resources.Compiler)
  SharedDtor();
}

void Compiler::SharedDtor() {
  eobjs_directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codegen_directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Compiler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Compiler::descriptor() {
  ::protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Compiler& Compiler::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Settings_2eproto::scc_info_Compiler.base);
  return *internal_default_instance();
}


void Compiler::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Compiler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyword_blacklist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      eobjs_directory_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      codegen_directory_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&inherit_strings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inherit_negatives_) -
        reinterpret_cast<char*>(&inherit_strings_)) + sizeof(inherit_negatives_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&compliance_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_angular_unit_) -
        reinterpret_cast<char*>(&compliance_mode_)) + sizeof(audio_angular_unit_));
  }
  audio_scalar_precision_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Compiler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Compiler)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 inherit_strings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_inherit_strings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inherit_strings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inherit_escapes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_inherit_escapes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inherit_escapes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inherit_increment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_inherit_increment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inherit_increment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inherit_equivalence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_inherit_equivalence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inherit_equivalence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inherit_literals = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_inherit_literals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inherit_literals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inherit_negatives = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_inherit_negatives();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inherit_negatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 compliance_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_compliance_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compliance_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keyword_blacklist = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyword_blacklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyword_blacklist(this->keyword_blacklist_size() - 1).data(),
            static_cast<int>(this->keyword_blacklist(this->keyword_blacklist_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Compiler.keyword_blacklist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string eobjs_directory = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eobjs_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eobjs_directory().data(), static_cast<int>(this->eobjs_directory().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Compiler.eobjs_directory");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string codegen_directory = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codegen_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codegen_directory().data(), static_cast<int>(this->codegen_directory().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Compiler.codegen_directory");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherit_objects = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_inherit_objects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool automatic_semicolons = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_automatic_semicolons();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automatic_semicolons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 graphics_angular_unit = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_graphics_angular_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &graphics_angular_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 graphics_scalar_precision = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_graphics_scalar_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &graphics_scalar_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collision_angular_unit = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_collision_angular_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collision_angular_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collision_scalar_precision = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_collision_scalar_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collision_scalar_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 audio_angular_unit = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_audio_angular_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_angular_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 audio_scalar_precision = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_audio_scalar_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_scalar_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Compiler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Compiler)
  return false;
#undef DO_
}

void Compiler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Compiler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 inherit_strings = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inherit_strings(), output);
  }

  // optional uint32 inherit_escapes = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inherit_escapes(), output);
  }

  // optional uint32 inherit_increment = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inherit_increment(), output);
  }

  // optional uint32 inherit_equivalence = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->inherit_equivalence(), output);
  }

  // optional uint32 inherit_literals = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->inherit_literals(), output);
  }

  // optional uint32 inherit_negatives = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->inherit_negatives(), output);
  }

  // optional uint32 compliance_mode = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->compliance_mode(), output);
  }

  // repeated string keyword_blacklist = 8;
  for (int i = 0, n = this->keyword_blacklist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword_blacklist(i).data(), static_cast<int>(this->keyword_blacklist(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Compiler.keyword_blacklist");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->keyword_blacklist(i), output);
  }

  // optional string eobjs_directory = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eobjs_directory().data(), static_cast<int>(this->eobjs_directory().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Compiler.eobjs_directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->eobjs_directory(), output);
  }

  // optional string codegen_directory = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codegen_directory().data(), static_cast<int>(this->codegen_directory().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Compiler.codegen_directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->codegen_directory(), output);
  }

  // optional bool inherit_objects = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->inherit_objects(), output);
  }

  // optional bool automatic_semicolons = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->automatic_semicolons(), output);
  }

  // optional uint32 graphics_angular_unit = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->graphics_angular_unit(), output);
  }

  // optional uint32 graphics_scalar_precision = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->graphics_scalar_precision(), output);
  }

  // optional uint32 collision_angular_unit = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->collision_angular_unit(), output);
  }

  // optional uint32 collision_scalar_precision = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->collision_scalar_precision(), output);
  }

  // optional uint32 audio_angular_unit = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->audio_angular_unit(), output);
  }

  // optional uint32 audio_scalar_precision = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->audio_scalar_precision(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Compiler)
}

::google::protobuf::uint8* Compiler::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Compiler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 inherit_strings = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inherit_strings(), target);
  }

  // optional uint32 inherit_escapes = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inherit_escapes(), target);
  }

  // optional uint32 inherit_increment = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inherit_increment(), target);
  }

  // optional uint32 inherit_equivalence = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->inherit_equivalence(), target);
  }

  // optional uint32 inherit_literals = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->inherit_literals(), target);
  }

  // optional uint32 inherit_negatives = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->inherit_negatives(), target);
  }

  // optional uint32 compliance_mode = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->compliance_mode(), target);
  }

  // repeated string keyword_blacklist = 8;
  for (int i = 0, n = this->keyword_blacklist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword_blacklist(i).data(), static_cast<int>(this->keyword_blacklist(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Compiler.keyword_blacklist");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->keyword_blacklist(i), target);
  }

  // optional string eobjs_directory = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eobjs_directory().data(), static_cast<int>(this->eobjs_directory().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Compiler.eobjs_directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->eobjs_directory(), target);
  }

  // optional string codegen_directory = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codegen_directory().data(), static_cast<int>(this->codegen_directory().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Compiler.codegen_directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->codegen_directory(), target);
  }

  // optional bool inherit_objects = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->inherit_objects(), target);
  }

  // optional bool automatic_semicolons = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->automatic_semicolons(), target);
  }

  // optional uint32 graphics_angular_unit = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->graphics_angular_unit(), target);
  }

  // optional uint32 graphics_scalar_precision = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->graphics_scalar_precision(), target);
  }

  // optional uint32 collision_angular_unit = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->collision_angular_unit(), target);
  }

  // optional uint32 collision_scalar_precision = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->collision_scalar_precision(), target);
  }

  // optional uint32 audio_angular_unit = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->audio_angular_unit(), target);
  }

  // optional uint32 audio_scalar_precision = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->audio_scalar_precision(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Compiler)
  return target;
}

size_t Compiler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Compiler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string keyword_blacklist = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keyword_blacklist_size());
  for (int i = 0, n = this->keyword_blacklist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyword_blacklist(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string eobjs_directory = 9;
    if (has_eobjs_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eobjs_directory());
    }

    // optional string codegen_directory = 10;
    if (has_codegen_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codegen_directory());
    }

    // optional uint32 inherit_strings = 1;
    if (has_inherit_strings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inherit_strings());
    }

    // optional uint32 inherit_escapes = 2;
    if (has_inherit_escapes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inherit_escapes());
    }

    // optional uint32 inherit_increment = 3;
    if (has_inherit_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inherit_increment());
    }

    // optional uint32 inherit_equivalence = 4;
    if (has_inherit_equivalence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inherit_equivalence());
    }

    // optional uint32 inherit_literals = 5;
    if (has_inherit_literals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inherit_literals());
    }

    // optional uint32 inherit_negatives = 6;
    if (has_inherit_negatives()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inherit_negatives());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 compliance_mode = 7;
    if (has_compliance_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compliance_mode());
    }

    // optional bool inherit_objects = 11;
    if (has_inherit_objects()) {
      total_size += 1 + 1;
    }

    // optional bool automatic_semicolons = 12;
    if (has_automatic_semicolons()) {
      total_size += 1 + 1;
    }

    // optional uint32 graphics_angular_unit = 13;
    if (has_graphics_angular_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->graphics_angular_unit());
    }

    // optional uint32 graphics_scalar_precision = 14;
    if (has_graphics_scalar_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->graphics_scalar_precision());
    }

    // optional uint32 collision_angular_unit = 15;
    if (has_collision_angular_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collision_angular_unit());
    }

    // optional uint32 collision_scalar_precision = 16;
    if (has_collision_scalar_precision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collision_scalar_precision());
    }

    // optional uint32 audio_angular_unit = 17;
    if (has_audio_angular_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_angular_unit());
    }

  }
  // optional uint32 audio_scalar_precision = 18;
  if (has_audio_scalar_precision()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->audio_scalar_precision());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Compiler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Compiler)
  GOOGLE_DCHECK_NE(&from, this);
  const Compiler* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Compiler>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Compiler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Compiler)
    MergeFrom(*source);
  }
}

void Compiler::MergeFrom(const Compiler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Compiler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyword_blacklist_.MergeFrom(from.keyword_blacklist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_eobjs_directory();
      eobjs_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eobjs_directory_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_codegen_directory();
      codegen_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codegen_directory_);
    }
    if (cached_has_bits & 0x00000004u) {
      inherit_strings_ = from.inherit_strings_;
    }
    if (cached_has_bits & 0x00000008u) {
      inherit_escapes_ = from.inherit_escapes_;
    }
    if (cached_has_bits & 0x00000010u) {
      inherit_increment_ = from.inherit_increment_;
    }
    if (cached_has_bits & 0x00000020u) {
      inherit_equivalence_ = from.inherit_equivalence_;
    }
    if (cached_has_bits & 0x00000040u) {
      inherit_literals_ = from.inherit_literals_;
    }
    if (cached_has_bits & 0x00000080u) {
      inherit_negatives_ = from.inherit_negatives_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      compliance_mode_ = from.compliance_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      inherit_objects_ = from.inherit_objects_;
    }
    if (cached_has_bits & 0x00000400u) {
      automatic_semicolons_ = from.automatic_semicolons_;
    }
    if (cached_has_bits & 0x00000800u) {
      graphics_angular_unit_ = from.graphics_angular_unit_;
    }
    if (cached_has_bits & 0x00001000u) {
      graphics_scalar_precision_ = from.graphics_scalar_precision_;
    }
    if (cached_has_bits & 0x00002000u) {
      collision_angular_unit_ = from.collision_angular_unit_;
    }
    if (cached_has_bits & 0x00004000u) {
      collision_scalar_precision_ = from.collision_scalar_precision_;
    }
    if (cached_has_bits & 0x00008000u) {
      audio_angular_unit_ = from.audio_angular_unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_audio_scalar_precision(from.audio_scalar_precision());
  }
}

void Compiler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Compiler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Compiler::CopyFrom(const Compiler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Compiler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compiler::IsInitialized() const {
  return true;
}

void Compiler::Swap(Compiler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Compiler::InternalSwap(Compiler* other) {
  using std::swap;
  keyword_blacklist_.InternalSwap(CastToBase(&other->keyword_blacklist_));
  eobjs_directory_.Swap(&other->eobjs_directory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  codegen_directory_.Swap(&other->codegen_directory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inherit_strings_, other->inherit_strings_);
  swap(inherit_escapes_, other->inherit_escapes_);
  swap(inherit_increment_, other->inherit_increment_);
  swap(inherit_equivalence_, other->inherit_equivalence_);
  swap(inherit_literals_, other->inherit_literals_);
  swap(inherit_negatives_, other->inherit_negatives_);
  swap(compliance_mode_, other->compliance_mode_);
  swap(inherit_objects_, other->inherit_objects_);
  swap(automatic_semicolons_, other->automatic_semicolons_);
  swap(graphics_angular_unit_, other->graphics_angular_unit_);
  swap(graphics_scalar_precision_, other->graphics_scalar_precision_);
  swap(collision_angular_unit_, other->collision_angular_unit_);
  swap(collision_scalar_precision_, other->collision_scalar_precision_);
  swap(audio_angular_unit_, other->audio_angular_unit_);
  swap(audio_scalar_precision_, other->audio_scalar_precision_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Compiler::GetMetadata() const {
  protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void General::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int General::kGameIdFieldNumber;
const int General::kGameGuidFieldNumber;
const int General::kColorOutsideRoomRegionFieldNumber;
const int General::kDisplayNameFieldNumber;
const int General::kVersionMajorFieldNumber;
const int General::kVersionMinorFieldNumber;
const int General::kVersionReleaseFieldNumber;
const int General::kVersionBuildFieldNumber;
const int General::kCompanyFieldNumber;
const int General::kProductFieldNumber;
const int General::kCopyrightFieldNumber;
const int General::kDescriptionFieldNumber;
const int General::kShowCursorFieldNumber;
const int General::kGameIconFieldNumber;
const int General::kSplashScreenFieldNumber;
const int General::kShowSplashScreenFieldNumber;
const int General::kSleepMarginFieldNumber;
const int General::kSaveDataLocationFieldNumber;
const int General::kMenuDockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

General::General()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Settings_2eproto::scc_info_General.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.General)
}
General::General(const General& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_guid()) {
    game_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_guid_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_name()) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  company_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_company()) {
    company_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_);
  }
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product()) {
    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  copyright_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_copyright()) {
    copyright_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.copyright_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  game_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_icon()) {
    game_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_icon_);
  }
  splash_screen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_splash_screen()) {
    splash_screen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.splash_screen_);
  }
  save_data_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_save_data_location()) {
    save_data_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_data_location_);
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sleep_margin_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(sleep_margin_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.General)
}

void General::SharedCtor() {
  game_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copyright_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  splash_screen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_data_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sleep_margin_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(sleep_margin_));
}

General::~General() {
  // @@protoc_insertion_point(destructor:buffers.resources.General)
  SharedDtor();
}

void General::SharedDtor() {
  game_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copyright_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  splash_screen_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_data_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void General::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* General::descriptor() {
  ::protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const General& General::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Settings_2eproto::scc_info_General.base);
  return *internal_default_instance();
}


void General::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.General)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      game_guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      display_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      company_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      product_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      copyright_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      game_icon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      splash_screen_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    save_data_location_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_cursor_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(show_cursor_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&show_splash_screen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sleep_margin_) -
        reinterpret_cast<char*>(&show_splash_screen_)) + sizeof(sleep_margin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool General::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.General)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 game_id = 1 [(.buffers.gmx) = "option_gameid"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_guid = 2 [(.buffers.gmx) = "option_gameguid"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_guid().data(), static_cast<int>(this->game_guid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.General.game_guid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 color_outside_room_region = 3 [(.buffers.gmx) = "option_windowcolor"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_color_outside_room_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_outside_room_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display_name = 4 [(.buffers.gmx) = "option_display_name"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.General.display_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_major = 5 [(.buffers.gmx) = "option_version_major"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_version_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_minor = 6 [(.buffers.gmx) = "option_version_minor"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_version_minor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_release = 7 [(.buffers.gmx) = "option_version_release"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_version_release();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_release_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_build = 8 [(.buffers.gmx) = "option_version_build"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_version_build();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_build_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string company = 9 [(.buffers.gmx) = "option_version_company"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company().data(), static_cast<int>(this->company().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.General.company");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product = 10 [(.buffers.gmx) = "option_version_product"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product().data(), static_cast<int>(this->product().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.General.product");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string copyright = 11 [(.buffers.gmx) = "option_version_copyright"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_copyright()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->copyright().data(), static_cast<int>(this->copyright().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.General.copyright");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 12 [(.buffers.gmx) = "option_version_description"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.General.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_cursor = 13 [(.buffers.gmx) = "option_showcursor"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_show_cursor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_cursor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_icon = 14 [(.buffers.gmx) = "option_windows_game_icon"];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_icon().data(), static_cast<int>(this->game_icon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.General.game_icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string splash_screen = 15 [(.buffers.gmx) = "option_windows_splash_screen"];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_splash_screen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->splash_screen().data(), static_cast<int>(this->splash_screen().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.General.splash_screen");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_splash_screen = 16 [(.buffers.gmx) = "option_windows_use_splash"];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_show_splash_screen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_splash_screen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sleep_margin = 17 [(.buffers.gmx) = "option_windows_sleep_margin"];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_sleep_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sleep_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string save_data_location = 18 [(.buffers.gmx) = "option_windows_save_location"];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_data_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save_data_location().data(), static_cast<int>(this->save_data_location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.General.save_data_location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool menu_dock = 19 [(.buffers.gmx) = "option_mac_menu_dock"];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_menu_dock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &menu_dock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.General)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.General)
  return false;
#undef DO_
}

void General::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.General)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1 [(.buffers.gmx) = "option_gameid"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->game_id(), output);
  }

  // optional string game_guid = 2 [(.buffers.gmx) = "option_gameguid"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_guid().data(), static_cast<int>(this->game_guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.game_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_guid(), output);
  }

  // optional int32 color_outside_room_region = 3 [(.buffers.gmx) = "option_windowcolor"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->color_outside_room_region(), output);
  }

  // optional string display_name = 4 [(.buffers.gmx) = "option_display_name"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->display_name(), output);
  }

  // optional uint32 version_major = 5 [(.buffers.gmx) = "option_version_major"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->version_major(), output);
  }

  // optional uint32 version_minor = 6 [(.buffers.gmx) = "option_version_minor"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->version_minor(), output);
  }

  // optional uint32 version_release = 7 [(.buffers.gmx) = "option_version_release"];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->version_release(), output);
  }

  // optional uint32 version_build = 8 [(.buffers.gmx) = "option_version_build"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->version_build(), output);
  }

  // optional string company = 9 [(.buffers.gmx) = "option_version_company"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company().data(), static_cast<int>(this->company().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.company");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->company(), output);
  }

  // optional string product = 10 [(.buffers.gmx) = "option_version_product"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->product(), output);
  }

  // optional string copyright = 11 [(.buffers.gmx) = "option_version_copyright"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->copyright().data(), static_cast<int>(this->copyright().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.copyright");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->copyright(), output);
  }

  // optional string description = 12 [(.buffers.gmx) = "option_version_description"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->description(), output);
  }

  // optional bool show_cursor = 13 [(.buffers.gmx) = "option_showcursor"];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->show_cursor(), output);
  }

  // optional string game_icon = 14 [(.buffers.gmx) = "option_windows_game_icon"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_icon().data(), static_cast<int>(this->game_icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.game_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->game_icon(), output);
  }

  // optional string splash_screen = 15 [(.buffers.gmx) = "option_windows_splash_screen"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->splash_screen().data(), static_cast<int>(this->splash_screen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.splash_screen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->splash_screen(), output);
  }

  // optional bool show_splash_screen = 16 [(.buffers.gmx) = "option_windows_use_splash"];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->show_splash_screen(), output);
  }

  // optional uint32 sleep_margin = 17 [(.buffers.gmx) = "option_windows_sleep_margin"];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sleep_margin(), output);
  }

  // optional string save_data_location = 18 [(.buffers.gmx) = "option_windows_save_location"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_data_location().data(), static_cast<int>(this->save_data_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.save_data_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->save_data_location(), output);
  }

  // optional bool menu_dock = 19 [(.buffers.gmx) = "option_mac_menu_dock"];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->menu_dock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.General)
}

::google::protobuf::uint8* General::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.General)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1 [(.buffers.gmx) = "option_gameid"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->game_id(), target);
  }

  // optional string game_guid = 2 [(.buffers.gmx) = "option_gameguid"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_guid().data(), static_cast<int>(this->game_guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.game_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_guid(), target);
  }

  // optional int32 color_outside_room_region = 3 [(.buffers.gmx) = "option_windowcolor"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->color_outside_room_region(), target);
  }

  // optional string display_name = 4 [(.buffers.gmx) = "option_display_name"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->display_name(), target);
  }

  // optional uint32 version_major = 5 [(.buffers.gmx) = "option_version_major"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->version_major(), target);
  }

  // optional uint32 version_minor = 6 [(.buffers.gmx) = "option_version_minor"];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->version_minor(), target);
  }

  // optional uint32 version_release = 7 [(.buffers.gmx) = "option_version_release"];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->version_release(), target);
  }

  // optional uint32 version_build = 8 [(.buffers.gmx) = "option_version_build"];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->version_build(), target);
  }

  // optional string company = 9 [(.buffers.gmx) = "option_version_company"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company().data(), static_cast<int>(this->company().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.company");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->company(), target);
  }

  // optional string product = 10 [(.buffers.gmx) = "option_version_product"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->product(), target);
  }

  // optional string copyright = 11 [(.buffers.gmx) = "option_version_copyright"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->copyright().data(), static_cast<int>(this->copyright().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.copyright");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->copyright(), target);
  }

  // optional string description = 12 [(.buffers.gmx) = "option_version_description"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->description(), target);
  }

  // optional bool show_cursor = 13 [(.buffers.gmx) = "option_showcursor"];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->show_cursor(), target);
  }

  // optional string game_icon = 14 [(.buffers.gmx) = "option_windows_game_icon"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_icon().data(), static_cast<int>(this->game_icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.game_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->game_icon(), target);
  }

  // optional string splash_screen = 15 [(.buffers.gmx) = "option_windows_splash_screen"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->splash_screen().data(), static_cast<int>(this->splash_screen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.splash_screen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->splash_screen(), target);
  }

  // optional bool show_splash_screen = 16 [(.buffers.gmx) = "option_windows_use_splash"];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->show_splash_screen(), target);
  }

  // optional uint32 sleep_margin = 17 [(.buffers.gmx) = "option_windows_sleep_margin"];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sleep_margin(), target);
  }

  // optional string save_data_location = 18 [(.buffers.gmx) = "option_windows_save_location"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_data_location().data(), static_cast<int>(this->save_data_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.General.save_data_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->save_data_location(), target);
  }

  // optional bool menu_dock = 19 [(.buffers.gmx) = "option_mac_menu_dock"];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->menu_dock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.General)
  return target;
}

size_t General::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.General)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string game_guid = 2 [(.buffers.gmx) = "option_gameguid"];
    if (has_game_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_guid());
    }

    // optional string display_name = 4 [(.buffers.gmx) = "option_display_name"];
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string company = 9 [(.buffers.gmx) = "option_version_company"];
    if (has_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company());
    }

    // optional string product = 10 [(.buffers.gmx) = "option_version_product"];
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional string copyright = 11 [(.buffers.gmx) = "option_version_copyright"];
    if (has_copyright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->copyright());
    }

    // optional string description = 12 [(.buffers.gmx) = "option_version_description"];
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string game_icon = 14 [(.buffers.gmx) = "option_windows_game_icon"];
    if (has_game_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_icon());
    }

    // optional string splash_screen = 15 [(.buffers.gmx) = "option_windows_splash_screen"];
    if (has_splash_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->splash_screen());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string save_data_location = 18 [(.buffers.gmx) = "option_windows_save_location"];
    if (has_save_data_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_data_location());
    }

    // optional uint64 game_id = 1 [(.buffers.gmx) = "option_gameid"];
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional int32 color_outside_room_region = 3 [(.buffers.gmx) = "option_windowcolor"];
    if (has_color_outside_room_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color_outside_room_region());
    }

    // optional uint32 version_major = 5 [(.buffers.gmx) = "option_version_major"];
    if (has_version_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_major());
    }

    // optional uint32 version_minor = 6 [(.buffers.gmx) = "option_version_minor"];
    if (has_version_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_minor());
    }

    // optional uint32 version_release = 7 [(.buffers.gmx) = "option_version_release"];
    if (has_version_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_release());
    }

    // optional uint32 version_build = 8 [(.buffers.gmx) = "option_version_build"];
    if (has_version_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_build());
    }

    // optional bool show_cursor = 13 [(.buffers.gmx) = "option_showcursor"];
    if (has_show_cursor()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional bool show_splash_screen = 16 [(.buffers.gmx) = "option_windows_use_splash"];
    if (has_show_splash_screen()) {
      total_size += 2 + 1;
    }

    // optional bool menu_dock = 19 [(.buffers.gmx) = "option_mac_menu_dock"];
    if (has_menu_dock()) {
      total_size += 2 + 1;
    }

    // optional uint32 sleep_margin = 17 [(.buffers.gmx) = "option_windows_sleep_margin"];
    if (has_sleep_margin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sleep_margin());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void General::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.General)
  GOOGLE_DCHECK_NE(&from, this);
  const General* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const General>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.General)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.General)
    MergeFrom(*source);
  }
}

void General::MergeFrom(const General& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.General)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_guid();
      game_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_display_name();
      display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_company();
      company_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_product();
      product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_copyright();
      copyright_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.copyright_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_game_icon();
      game_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_icon_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_splash_screen();
      splash_screen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.splash_screen_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_save_data_location();
      save_data_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_data_location_);
    }
    if (cached_has_bits & 0x00000200u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      color_outside_room_region_ = from.color_outside_room_region_;
    }
    if (cached_has_bits & 0x00000800u) {
      version_major_ = from.version_major_;
    }
    if (cached_has_bits & 0x00001000u) {
      version_minor_ = from.version_minor_;
    }
    if (cached_has_bits & 0x00002000u) {
      version_release_ = from.version_release_;
    }
    if (cached_has_bits & 0x00004000u) {
      version_build_ = from.version_build_;
    }
    if (cached_has_bits & 0x00008000u) {
      show_cursor_ = from.show_cursor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      show_splash_screen_ = from.show_splash_screen_;
    }
    if (cached_has_bits & 0x00020000u) {
      menu_dock_ = from.menu_dock_;
    }
    if (cached_has_bits & 0x00040000u) {
      sleep_margin_ = from.sleep_margin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void General::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.General)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void General::CopyFrom(const General& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.General)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool General::IsInitialized() const {
  return true;
}

void General::Swap(General* other) {
  if (other == this) return;
  InternalSwap(other);
}
void General::InternalSwap(General* other) {
  using std::swap;
  game_guid_.Swap(&other->game_guid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_.Swap(&other->company_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_.Swap(&other->product_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  copyright_.Swap(&other->copyright_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_icon_.Swap(&other->game_icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  splash_screen_.Swap(&other->splash_screen_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  save_data_location_.Swap(&other->save_data_location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(game_id_, other->game_id_);
  swap(color_outside_room_region_, other->color_outside_room_region_);
  swap(version_major_, other->version_major_);
  swap(version_minor_, other->version_minor_);
  swap(version_release_, other->version_release_);
  swap(version_build_, other->version_build_);
  swap(show_cursor_, other->show_cursor_);
  swap(show_splash_screen_, other->show_splash_screen_);
  swap(menu_dock_, other->menu_dock_);
  swap(sleep_margin_, other->sleep_margin_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata General::GetMetadata() const {
  protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Graphics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graphics::kStartInFullscreenFieldNumber;
const int Graphics::kAllowFullscreenChangeFieldNumber;
const int Graphics::kSmoothColorsFieldNumber;
const int Graphics::kForceSoftwareVertexProcessingFieldNumber;
const int Graphics::kFreezeOnLoseFocusFieldNumber;
const int Graphics::kUseSynchronizationFieldNumber;
const int Graphics::kWindowSizeableFieldNumber;
const int Graphics::kWindowShowborderFieldNumber;
const int Graphics::kWindowShowiconsFieldNumber;
const int Graphics::kWindowStayontopFieldNumber;
const int Graphics::kWindowScaleFieldNumber;
const int Graphics::kCreateTexturesOnDemandFieldNumber;
const int Graphics::kAlternateSynchronizationMethodFieldNumber;
const int Graphics::kVertexBufferMethodFieldNumber;
const int Graphics::kTexturePageSizeFieldNumber;
const int Graphics::kEnableHidpiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graphics::Graphics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Settings_2eproto::scc_info_Graphics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Graphics)
}
Graphics::Graphics(const Graphics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_in_fullscreen_, &from.start_in_fullscreen_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_hidpi_) -
    reinterpret_cast<char*>(&start_in_fullscreen_)) + sizeof(enable_hidpi_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Graphics)
}

void Graphics::SharedCtor() {
  ::memset(&start_in_fullscreen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_hidpi_) -
      reinterpret_cast<char*>(&start_in_fullscreen_)) + sizeof(enable_hidpi_));
}

Graphics::~Graphics() {
  // @@protoc_insertion_point(destructor:buffers.resources.Graphics)
  SharedDtor();
}

void Graphics::SharedDtor() {
}

void Graphics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Graphics::descriptor() {
  ::protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Graphics& Graphics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Settings_2eproto::scc_info_Graphics.base);
  return *internal_default_instance();
}


void Graphics::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Graphics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&start_in_fullscreen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&window_showborder_) -
        reinterpret_cast<char*>(&start_in_fullscreen_)) + sizeof(window_showborder_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&window_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_hidpi_) -
        reinterpret_cast<char*>(&window_scale_)) + sizeof(enable_hidpi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Graphics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Graphics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool start_in_fullscreen = 1 [(.buffers.gmx) = "option_fullscreen"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start_in_fullscreen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_in_fullscreen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_fullscreen_change = 2 [(.buffers.gmx) = "option_screenkey"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_allow_fullscreen_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_fullscreen_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool smooth_colors = 3 [(.buffers.gmx) = "option_interpolate"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_smooth_colors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smooth_colors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_software_vertex_processing = 4 [(.buffers.gmx) = ""];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_force_software_vertex_processing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_software_vertex_processing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool freeze_on_lose_focus = 5 [(.buffers.gmx) = "option_freeze"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_freeze_on_lose_focus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freeze_on_lose_focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_synchronization = 6 [(.buffers.gmx) = ""];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_use_synchronization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_synchronization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool window_sizeable = 7 [(.buffers.gmx) = "option_sizeable"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_window_sizeable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &window_sizeable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool window_showborder = 8 [(.buffers.gmx) = "option_noborder"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_window_showborder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &window_showborder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool window_showicons = 9 [(.buffers.gmx) = "option_nobuttons"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_window_showicons();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &window_showicons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool window_stayontop = 10 [(.buffers.gmx) = "option_stayontop"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_window_stayontop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &window_stayontop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double window_scale = 11 [(.buffers.gmx) = "option_scale"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_window_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &window_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool create_textures_on_demand = 12 [(.buffers.gmx) = "option_windows_create_textures_on_demand"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_create_textures_on_demand();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_textures_on_demand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool alternate_synchronization_method = 13 [(.buffers.gmx) = "option_windows_alternate_sync_method"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_alternate_synchronization_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alternate_synchronization_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Graphics.VertexBufferMethod vertex_buffer_method = 14 [(.buffers.gmx) = "option_windows_vertex_buffer_method2"];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::buffers::resources::Graphics_VertexBufferMethod_IsValid(value)) {
            set_vertex_buffer_method(static_cast< ::buffers::resources::Graphics_VertexBufferMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 texture_page_size = 15 [(.buffers.gmx) = "option_windows_texture_page"];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_texture_page_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &texture_page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_hidpi = 16 [(.buffers.gmx) = "option_mac_enable_retina"];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_enable_hidpi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_hidpi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Graphics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Graphics)
  return false;
#undef DO_
}

void Graphics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Graphics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool start_in_fullscreen = 1 [(.buffers.gmx) = "option_fullscreen"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->start_in_fullscreen(), output);
  }

  // optional bool allow_fullscreen_change = 2 [(.buffers.gmx) = "option_screenkey"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow_fullscreen_change(), output);
  }

  // optional bool smooth_colors = 3 [(.buffers.gmx) = "option_interpolate"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->smooth_colors(), output);
  }

  // optional bool force_software_vertex_processing = 4 [(.buffers.gmx) = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->force_software_vertex_processing(), output);
  }

  // optional bool freeze_on_lose_focus = 5 [(.buffers.gmx) = "option_freeze"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->freeze_on_lose_focus(), output);
  }

  // optional bool use_synchronization = 6 [(.buffers.gmx) = ""];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_synchronization(), output);
  }

  // optional bool window_sizeable = 7 [(.buffers.gmx) = "option_sizeable"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->window_sizeable(), output);
  }

  // optional bool window_showborder = 8 [(.buffers.gmx) = "option_noborder"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->window_showborder(), output);
  }

  // optional bool window_showicons = 9 [(.buffers.gmx) = "option_nobuttons"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->window_showicons(), output);
  }

  // optional bool window_stayontop = 10 [(.buffers.gmx) = "option_stayontop"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->window_stayontop(), output);
  }

  // optional double window_scale = 11 [(.buffers.gmx) = "option_scale"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->window_scale(), output);
  }

  // optional bool create_textures_on_demand = 12 [(.buffers.gmx) = "option_windows_create_textures_on_demand"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->create_textures_on_demand(), output);
  }

  // optional bool alternate_synchronization_method = 13 [(.buffers.gmx) = "option_windows_alternate_sync_method"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->alternate_synchronization_method(), output);
  }

  // optional .buffers.resources.Graphics.VertexBufferMethod vertex_buffer_method = 14 [(.buffers.gmx) = "option_windows_vertex_buffer_method2"];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->vertex_buffer_method(), output);
  }

  // optional uint32 texture_page_size = 15 [(.buffers.gmx) = "option_windows_texture_page"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->texture_page_size(), output);
  }

  // optional bool enable_hidpi = 16 [(.buffers.gmx) = "option_mac_enable_retina"];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->enable_hidpi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Graphics)
}

::google::protobuf::uint8* Graphics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Graphics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool start_in_fullscreen = 1 [(.buffers.gmx) = "option_fullscreen"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->start_in_fullscreen(), target);
  }

  // optional bool allow_fullscreen_change = 2 [(.buffers.gmx) = "option_screenkey"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow_fullscreen_change(), target);
  }

  // optional bool smooth_colors = 3 [(.buffers.gmx) = "option_interpolate"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->smooth_colors(), target);
  }

  // optional bool force_software_vertex_processing = 4 [(.buffers.gmx) = ""];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->force_software_vertex_processing(), target);
  }

  // optional bool freeze_on_lose_focus = 5 [(.buffers.gmx) = "option_freeze"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->freeze_on_lose_focus(), target);
  }

  // optional bool use_synchronization = 6 [(.buffers.gmx) = ""];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_synchronization(), target);
  }

  // optional bool window_sizeable = 7 [(.buffers.gmx) = "option_sizeable"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->window_sizeable(), target);
  }

  // optional bool window_showborder = 8 [(.buffers.gmx) = "option_noborder"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->window_showborder(), target);
  }

  // optional bool window_showicons = 9 [(.buffers.gmx) = "option_nobuttons"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->window_showicons(), target);
  }

  // optional bool window_stayontop = 10 [(.buffers.gmx) = "option_stayontop"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->window_stayontop(), target);
  }

  // optional double window_scale = 11 [(.buffers.gmx) = "option_scale"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->window_scale(), target);
  }

  // optional bool create_textures_on_demand = 12 [(.buffers.gmx) = "option_windows_create_textures_on_demand"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->create_textures_on_demand(), target);
  }

  // optional bool alternate_synchronization_method = 13 [(.buffers.gmx) = "option_windows_alternate_sync_method"];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->alternate_synchronization_method(), target);
  }

  // optional .buffers.resources.Graphics.VertexBufferMethod vertex_buffer_method = 14 [(.buffers.gmx) = "option_windows_vertex_buffer_method2"];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->vertex_buffer_method(), target);
  }

  // optional uint32 texture_page_size = 15 [(.buffers.gmx) = "option_windows_texture_page"];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->texture_page_size(), target);
  }

  // optional bool enable_hidpi = 16 [(.buffers.gmx) = "option_mac_enable_retina"];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->enable_hidpi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Graphics)
  return target;
}

size_t Graphics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Graphics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool start_in_fullscreen = 1 [(.buffers.gmx) = "option_fullscreen"];
    if (has_start_in_fullscreen()) {
      total_size += 1 + 1;
    }

    // optional bool allow_fullscreen_change = 2 [(.buffers.gmx) = "option_screenkey"];
    if (has_allow_fullscreen_change()) {
      total_size += 1 + 1;
    }

    // optional bool smooth_colors = 3 [(.buffers.gmx) = "option_interpolate"];
    if (has_smooth_colors()) {
      total_size += 1 + 1;
    }

    // optional bool force_software_vertex_processing = 4 [(.buffers.gmx) = ""];
    if (has_force_software_vertex_processing()) {
      total_size += 1 + 1;
    }

    // optional bool freeze_on_lose_focus = 5 [(.buffers.gmx) = "option_freeze"];
    if (has_freeze_on_lose_focus()) {
      total_size += 1 + 1;
    }

    // optional bool use_synchronization = 6 [(.buffers.gmx) = ""];
    if (has_use_synchronization()) {
      total_size += 1 + 1;
    }

    // optional bool window_sizeable = 7 [(.buffers.gmx) = "option_sizeable"];
    if (has_window_sizeable()) {
      total_size += 1 + 1;
    }

    // optional bool window_showborder = 8 [(.buffers.gmx) = "option_noborder"];
    if (has_window_showborder()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double window_scale = 11 [(.buffers.gmx) = "option_scale"];
    if (has_window_scale()) {
      total_size += 1 + 8;
    }

    // optional bool window_showicons = 9 [(.buffers.gmx) = "option_nobuttons"];
    if (has_window_showicons()) {
      total_size += 1 + 1;
    }

    // optional bool window_stayontop = 10 [(.buffers.gmx) = "option_stayontop"];
    if (has_window_stayontop()) {
      total_size += 1 + 1;
    }

    // optional bool create_textures_on_demand = 12 [(.buffers.gmx) = "option_windows_create_textures_on_demand"];
    if (has_create_textures_on_demand()) {
      total_size += 1 + 1;
    }

    // optional bool alternate_synchronization_method = 13 [(.buffers.gmx) = "option_windows_alternate_sync_method"];
    if (has_alternate_synchronization_method()) {
      total_size += 1 + 1;
    }

    // optional .buffers.resources.Graphics.VertexBufferMethod vertex_buffer_method = 14 [(.buffers.gmx) = "option_windows_vertex_buffer_method2"];
    if (has_vertex_buffer_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vertex_buffer_method());
    }

    // optional uint32 texture_page_size = 15 [(.buffers.gmx) = "option_windows_texture_page"];
    if (has_texture_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->texture_page_size());
    }

    // optional bool enable_hidpi = 16 [(.buffers.gmx) = "option_mac_enable_retina"];
    if (has_enable_hidpi()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Graphics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Graphics)
  GOOGLE_DCHECK_NE(&from, this);
  const Graphics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Graphics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Graphics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Graphics)
    MergeFrom(*source);
  }
}

void Graphics::MergeFrom(const Graphics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Graphics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      start_in_fullscreen_ = from.start_in_fullscreen_;
    }
    if (cached_has_bits & 0x00000002u) {
      allow_fullscreen_change_ = from.allow_fullscreen_change_;
    }
    if (cached_has_bits & 0x00000004u) {
      smooth_colors_ = from.smooth_colors_;
    }
    if (cached_has_bits & 0x00000008u) {
      force_software_vertex_processing_ = from.force_software_vertex_processing_;
    }
    if (cached_has_bits & 0x00000010u) {
      freeze_on_lose_focus_ = from.freeze_on_lose_focus_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_synchronization_ = from.use_synchronization_;
    }
    if (cached_has_bits & 0x00000040u) {
      window_sizeable_ = from.window_sizeable_;
    }
    if (cached_has_bits & 0x00000080u) {
      window_showborder_ = from.window_showborder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      window_scale_ = from.window_scale_;
    }
    if (cached_has_bits & 0x00000200u) {
      window_showicons_ = from.window_showicons_;
    }
    if (cached_has_bits & 0x00000400u) {
      window_stayontop_ = from.window_stayontop_;
    }
    if (cached_has_bits & 0x00000800u) {
      create_textures_on_demand_ = from.create_textures_on_demand_;
    }
    if (cached_has_bits & 0x00001000u) {
      alternate_synchronization_method_ = from.alternate_synchronization_method_;
    }
    if (cached_has_bits & 0x00002000u) {
      vertex_buffer_method_ = from.vertex_buffer_method_;
    }
    if (cached_has_bits & 0x00004000u) {
      texture_page_size_ = from.texture_page_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_hidpi_ = from.enable_hidpi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Graphics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Graphics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graphics::CopyFrom(const Graphics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Graphics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graphics::IsInitialized() const {
  return true;
}

void Graphics::Swap(Graphics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graphics::InternalSwap(Graphics* other) {
  using std::swap;
  swap(start_in_fullscreen_, other->start_in_fullscreen_);
  swap(allow_fullscreen_change_, other->allow_fullscreen_change_);
  swap(smooth_colors_, other->smooth_colors_);
  swap(force_software_vertex_processing_, other->force_software_vertex_processing_);
  swap(freeze_on_lose_focus_, other->freeze_on_lose_focus_);
  swap(use_synchronization_, other->use_synchronization_);
  swap(window_sizeable_, other->window_sizeable_);
  swap(window_showborder_, other->window_showborder_);
  swap(window_scale_, other->window_scale_);
  swap(window_showicons_, other->window_showicons_);
  swap(window_stayontop_, other->window_stayontop_);
  swap(create_textures_on_demand_, other->create_textures_on_demand_);
  swap(alternate_synchronization_method_, other->alternate_synchronization_method_);
  swap(vertex_buffer_method_, other->vertex_buffer_method_);
  swap(texture_page_size_, other->texture_page_size_);
  swap(enable_hidpi_, other->enable_hidpi_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Graphics::GetMetadata() const {
  protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Info::kAuthorNameFieldNumber;
const int Info::kAuthorEmailFieldNumber;
const int Info::kWebsiteFieldNumber;
const int Info::kVersionFieldNumber;
const int Info::kLastChangedFieldNumber;
const int Info::kInformationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Info::Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Settings_2eproto::scc_info_Info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Info)
}
Info::Info(const Info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  author_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_author_name()) {
    author_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_name_);
  }
  author_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_author_email()) {
    author_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_email_);
  }
  website_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_website()) {
    website_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.website_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  information_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_information()) {
    information_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.information_);
  }
  last_changed_ = from.last_changed_;
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Info)
}

void Info::SharedCtor() {
  author_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  website_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  information_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_changed_ = 0u;
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:buffers.resources.Info)
  SharedDtor();
}

void Info::SharedDtor() {
  author_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  website_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  information_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Info::descriptor() {
  ::protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Info& Info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Settings_2eproto::scc_info_Info.base);
  return *internal_default_instance();
}


void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      author_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      author_email_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      website_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      information_.ClearNonDefaultToEmptyNoArena();
    }
  }
  last_changed_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string author_name = 1 [(.buffers.gmx) = "option_author"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author_name().data(), static_cast<int>(this->author_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Info.author_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string author_email = 2 [(.buffers.gmx) = "option_linux_maintainer_email"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author_email().data(), static_cast<int>(this->author_email().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Info.author_email");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string website = 3 [(.buffers.gmx) = "option_linux_homepage"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_website()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->website().data(), static_cast<int>(this->website().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Info.website");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 4 [(.buffers.gmx) = "option_version"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Info.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_changed = 5 [(.buffers.gmx) = "option_lastchanged"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_last_changed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_changed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string information = 6 [(.buffers.gmx) = "option_information"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_information()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->information().data(), static_cast<int>(this->information().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Info.information");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Info)
  return false;
#undef DO_
}

void Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string author_name = 1 [(.buffers.gmx) = "option_author"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author_name().data(), static_cast<int>(this->author_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Info.author_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->author_name(), output);
  }

  // optional string author_email = 2 [(.buffers.gmx) = "option_linux_maintainer_email"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author_email().data(), static_cast<int>(this->author_email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Info.author_email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->author_email(), output);
  }

  // optional string website = 3 [(.buffers.gmx) = "option_linux_homepage"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->website().data(), static_cast<int>(this->website().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Info.website");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->website(), output);
  }

  // optional string version = 4 [(.buffers.gmx) = "option_version"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Info.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // optional uint32 last_changed = 5 [(.buffers.gmx) = "option_lastchanged"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_changed(), output);
  }

  // optional string information = 6 [(.buffers.gmx) = "option_information"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->information().data(), static_cast<int>(this->information().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Info.information");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->information(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Info)
}

::google::protobuf::uint8* Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string author_name = 1 [(.buffers.gmx) = "option_author"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author_name().data(), static_cast<int>(this->author_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Info.author_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->author_name(), target);
  }

  // optional string author_email = 2 [(.buffers.gmx) = "option_linux_maintainer_email"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author_email().data(), static_cast<int>(this->author_email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Info.author_email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->author_email(), target);
  }

  // optional string website = 3 [(.buffers.gmx) = "option_linux_homepage"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->website().data(), static_cast<int>(this->website().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Info.website");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->website(), target);
  }

  // optional string version = 4 [(.buffers.gmx) = "option_version"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Info.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // optional uint32 last_changed = 5 [(.buffers.gmx) = "option_lastchanged"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_changed(), target);
  }

  // optional string information = 6 [(.buffers.gmx) = "option_information"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->information().data(), static_cast<int>(this->information().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Info.information");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->information(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Info)
  return target;
}

size_t Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string author_name = 1 [(.buffers.gmx) = "option_author"];
    if (has_author_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author_name());
    }

    // optional string author_email = 2 [(.buffers.gmx) = "option_linux_maintainer_email"];
    if (has_author_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author_email());
    }

    // optional string website = 3 [(.buffers.gmx) = "option_linux_homepage"];
    if (has_website()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->website());
    }

    // optional string version = 4 [(.buffers.gmx) = "option_version"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string information = 6 [(.buffers.gmx) = "option_information"];
    if (has_information()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->information());
    }

    // optional uint32 last_changed = 5 [(.buffers.gmx) = "option_lastchanged"];
    if (has_last_changed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_changed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Info)
  GOOGLE_DCHECK_NE(&from, this);
  const Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Info)
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_author_name();
      author_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_author_email();
      author_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_email_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_website();
      website_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.website_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_information();
      information_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.information_);
    }
    if (cached_has_bits & 0x00000020u) {
      last_changed_ = from.last_changed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {
  return true;
}

void Info::Swap(Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Info::InternalSwap(Info* other) {
  using std::swap;
  author_name_.Swap(&other->author_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  author_email_.Swap(&other->author_email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  website_.Swap(&other->website_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  information_.Swap(&other->information_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_changed_, other->last_changed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Info::GetMetadata() const {
  protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Installer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Installer::kFinishedImageFieldNumber;
const int Installer::kHeaderImageFieldNumber;
const int Installer::kScriptFieldNumber;
const int Installer::kLicenseAgreementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Installer::Installer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Settings_2eproto::scc_info_Installer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Installer)
}
Installer::Installer(const Installer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  finished_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_finished_image()) {
    finished_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.finished_image_);
  }
  header_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_image()) {
    header_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_image_);
  }
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_script()) {
    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  license_agreement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_license_agreement()) {
    license_agreement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_agreement_);
  }
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Installer)
}

void Installer::SharedCtor() {
  finished_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_agreement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Installer::~Installer() {
  // @@protoc_insertion_point(destructor:buffers.resources.Installer)
  SharedDtor();
}

void Installer::SharedDtor() {
  finished_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_agreement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Installer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Installer::descriptor() {
  ::protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Installer& Installer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Settings_2eproto::scc_info_Installer.base);
  return *internal_default_instance();
}


void Installer::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Installer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      finished_image_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      header_image_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      script_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      license_agreement_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Installer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Installer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string finished_image = 1 [(.buffers.gmx) = "option_windows_runner_finished"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finished_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->finished_image().data(), static_cast<int>(this->finished_image().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Installer.finished_image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string header_image = 2 [(.buffers.gmx) = "option_windows_runner_header"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header_image().data(), static_cast<int>(this->header_image().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Installer.header_image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string script = 3 [(.buffers.gmx) = "option_windows_nsis_file"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->script().data(), static_cast<int>(this->script().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Installer.script");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string license_agreement = 4 [(.buffers.gmx) = "option_windows_license"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_agreement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->license_agreement().data(), static_cast<int>(this->license_agreement().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Installer.license_agreement");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Installer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Installer)
  return false;
#undef DO_
}

void Installer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Installer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string finished_image = 1 [(.buffers.gmx) = "option_windows_runner_finished"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->finished_image().data(), static_cast<int>(this->finished_image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Installer.finished_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->finished_image(), output);
  }

  // optional string header_image = 2 [(.buffers.gmx) = "option_windows_runner_header"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_image().data(), static_cast<int>(this->header_image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Installer.header_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->header_image(), output);
  }

  // optional string script = 3 [(.buffers.gmx) = "option_windows_nsis_file"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Installer.script");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->script(), output);
  }

  // optional string license_agreement = 4 [(.buffers.gmx) = "option_windows_license"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_agreement().data(), static_cast<int>(this->license_agreement().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Installer.license_agreement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->license_agreement(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Installer)
}

::google::protobuf::uint8* Installer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Installer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string finished_image = 1 [(.buffers.gmx) = "option_windows_runner_finished"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->finished_image().data(), static_cast<int>(this->finished_image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Installer.finished_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->finished_image(), target);
  }

  // optional string header_image = 2 [(.buffers.gmx) = "option_windows_runner_header"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_image().data(), static_cast<int>(this->header_image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Installer.header_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->header_image(), target);
  }

  // optional string script = 3 [(.buffers.gmx) = "option_windows_nsis_file"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Installer.script");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->script(), target);
  }

  // optional string license_agreement = 4 [(.buffers.gmx) = "option_windows_license"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_agreement().data(), static_cast<int>(this->license_agreement().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Installer.license_agreement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->license_agreement(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Installer)
  return target;
}

size_t Installer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Installer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string finished_image = 1 [(.buffers.gmx) = "option_windows_runner_finished"];
    if (has_finished_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finished_image());
    }

    // optional string header_image = 2 [(.buffers.gmx) = "option_windows_runner_header"];
    if (has_header_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header_image());
    }

    // optional string script = 3 [(.buffers.gmx) = "option_windows_nsis_file"];
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }

    // optional string license_agreement = 4 [(.buffers.gmx) = "option_windows_license"];
    if (has_license_agreement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license_agreement());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Installer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Installer)
  GOOGLE_DCHECK_NE(&from, this);
  const Installer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Installer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Installer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Installer)
    MergeFrom(*source);
  }
}

void Installer::MergeFrom(const Installer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Installer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_finished_image();
      finished_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.finished_image_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_header_image();
      header_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_image_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_script();
      script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_license_agreement();
      license_agreement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_agreement_);
    }
  }
}

void Installer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Installer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Installer::CopyFrom(const Installer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Installer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Installer::IsInitialized() const {
  return true;
}

void Installer::Swap(Installer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Installer::InternalSwap(Installer* other) {
  using std::swap;
  finished_image_.Swap(&other->finished_image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  header_image_.Swap(&other->header_image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  script_.Swap(&other->script_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  license_agreement_.Swap(&other->license_agreement_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Installer::GetMetadata() const {
  protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Deployment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Deployment::kAppIdFieldNumber;
const int Deployment::kAppOutputFieldNumber;
const int Deployment::kTeamIdentifierFieldNumber;
const int Deployment::kEnableAppstoreBuildFieldNumber;
const int Deployment::kAllowIncomingConnectionsFieldNumber;
const int Deployment::kAllowOutgoingConnectionsFieldNumber;
const int Deployment::kAppCategoryFieldNumber;
const int Deployment::kSigningIdentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Deployment::Deployment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Settings_2eproto::scc_info_Deployment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Deployment)
}
Deployment::Deployment(const Deployment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_id()) {
    app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  app_output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_output()) {
    app_output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_output_);
  }
  team_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_identifier()) {
    team_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_identifier_);
  }
  app_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_category()) {
    app_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_category_);
  }
  signing_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signing_identity()) {
    signing_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signing_identity_);
  }
  ::memcpy(&enable_appstore_build_, &from.enable_appstore_build_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_outgoing_connections_) -
    reinterpret_cast<char*>(&enable_appstore_build_)) + sizeof(allow_outgoing_connections_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Deployment)
}

void Deployment::SharedCtor() {
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signing_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_appstore_build_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_outgoing_connections_) -
      reinterpret_cast<char*>(&enable_appstore_build_)) + sizeof(allow_outgoing_connections_));
}

Deployment::~Deployment() {
  // @@protoc_insertion_point(destructor:buffers.resources.Deployment)
  SharedDtor();
}

void Deployment::SharedDtor() {
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signing_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Deployment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Deployment::descriptor() {
  ::protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Deployment& Deployment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Settings_2eproto::scc_info_Deployment.base);
  return *internal_default_instance();
}


void Deployment::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Deployment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      app_output_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      team_identifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      app_category_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      signing_identity_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&enable_appstore_build_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_outgoing_connections_) -
      reinterpret_cast<char*>(&enable_appstore_build_)) + sizeof(allow_outgoing_connections_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Deployment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Deployment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1 [(.buffers.gmx) = "option_mac_app_id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_id().data(), static_cast<int>(this->app_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Deployment.app_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_output = 2 [(.buffers.gmx) = "option_mac_output_dir"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_output().data(), static_cast<int>(this->app_output().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Deployment.app_output");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_identifier = 3 [(.buffers.gmx) = "option_mac_team_id"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_identifier().data(), static_cast<int>(this->team_identifier().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Deployment.team_identifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_appstore_build = 4 [(.buffers.gmx) = "option_mac_create_app_store"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_enable_appstore_build();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_appstore_build_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_incoming_connections = 5 [(.buffers.gmx) = "option_mac_appstore_incoming_allow"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_allow_incoming_connections();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_incoming_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_outgoing_connections = 6 [(.buffers.gmx) = "option_mac_appstore_outgoing_allow"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_allow_outgoing_connections();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_outgoing_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_category = 7 [(.buffers.gmx) = "option_mac_app_category"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_category().data(), static_cast<int>(this->app_category().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Deployment.app_category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string signing_identity = 8 [(.buffers.gmx) = "option_mac_signing_identity"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signing_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signing_identity().data(), static_cast<int>(this->signing_identity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Deployment.signing_identity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Deployment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Deployment)
  return false;
#undef DO_
}

void Deployment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Deployment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_id = 1 [(.buffers.gmx) = "option_mac_app_id"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), static_cast<int>(this->app_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Deployment.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // optional string app_output = 2 [(.buffers.gmx) = "option_mac_output_dir"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_output().data(), static_cast<int>(this->app_output().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Deployment.app_output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_output(), output);
  }

  // optional string team_identifier = 3 [(.buffers.gmx) = "option_mac_team_id"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_identifier().data(), static_cast<int>(this->team_identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Deployment.team_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_identifier(), output);
  }

  // optional bool enable_appstore_build = 4 [(.buffers.gmx) = "option_mac_create_app_store"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_appstore_build(), output);
  }

  // optional bool allow_incoming_connections = 5 [(.buffers.gmx) = "option_mac_appstore_incoming_allow"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_incoming_connections(), output);
  }

  // optional bool allow_outgoing_connections = 6 [(.buffers.gmx) = "option_mac_appstore_outgoing_allow"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allow_outgoing_connections(), output);
  }

  // optional string app_category = 7 [(.buffers.gmx) = "option_mac_app_category"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_category().data(), static_cast<int>(this->app_category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Deployment.app_category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->app_category(), output);
  }

  // optional string signing_identity = 8 [(.buffers.gmx) = "option_mac_signing_identity"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signing_identity().data(), static_cast<int>(this->signing_identity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Deployment.signing_identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->signing_identity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Deployment)
}

::google::protobuf::uint8* Deployment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Deployment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_id = 1 [(.buffers.gmx) = "option_mac_app_id"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), static_cast<int>(this->app_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Deployment.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }

  // optional string app_output = 2 [(.buffers.gmx) = "option_mac_output_dir"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_output().data(), static_cast<int>(this->app_output().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Deployment.app_output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_output(), target);
  }

  // optional string team_identifier = 3 [(.buffers.gmx) = "option_mac_team_id"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_identifier().data(), static_cast<int>(this->team_identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Deployment.team_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_identifier(), target);
  }

  // optional bool enable_appstore_build = 4 [(.buffers.gmx) = "option_mac_create_app_store"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable_appstore_build(), target);
  }

  // optional bool allow_incoming_connections = 5 [(.buffers.gmx) = "option_mac_appstore_incoming_allow"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_incoming_connections(), target);
  }

  // optional bool allow_outgoing_connections = 6 [(.buffers.gmx) = "option_mac_appstore_outgoing_allow"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allow_outgoing_connections(), target);
  }

  // optional string app_category = 7 [(.buffers.gmx) = "option_mac_app_category"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_category().data(), static_cast<int>(this->app_category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Deployment.app_category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->app_category(), target);
  }

  // optional string signing_identity = 8 [(.buffers.gmx) = "option_mac_signing_identity"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signing_identity().data(), static_cast<int>(this->signing_identity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Deployment.signing_identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->signing_identity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Deployment)
  return target;
}

size_t Deployment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Deployment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string app_id = 1 [(.buffers.gmx) = "option_mac_app_id"];
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string app_output = 2 [(.buffers.gmx) = "option_mac_output_dir"];
    if (has_app_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_output());
    }

    // optional string team_identifier = 3 [(.buffers.gmx) = "option_mac_team_id"];
    if (has_team_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_identifier());
    }

    // optional string app_category = 7 [(.buffers.gmx) = "option_mac_app_category"];
    if (has_app_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_category());
    }

    // optional string signing_identity = 8 [(.buffers.gmx) = "option_mac_signing_identity"];
    if (has_signing_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signing_identity());
    }

    // optional bool enable_appstore_build = 4 [(.buffers.gmx) = "option_mac_create_app_store"];
    if (has_enable_appstore_build()) {
      total_size += 1 + 1;
    }

    // optional bool allow_incoming_connections = 5 [(.buffers.gmx) = "option_mac_appstore_incoming_allow"];
    if (has_allow_incoming_connections()) {
      total_size += 1 + 1;
    }

    // optional bool allow_outgoing_connections = 6 [(.buffers.gmx) = "option_mac_appstore_outgoing_allow"];
    if (has_allow_outgoing_connections()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deployment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Deployment)
  GOOGLE_DCHECK_NE(&from, this);
  const Deployment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Deployment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Deployment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Deployment)
    MergeFrom(*source);
  }
}

void Deployment::MergeFrom(const Deployment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Deployment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_app_id();
      app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_app_output();
      app_output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_output_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_team_identifier();
      team_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_identifier_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_app_category();
      app_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_category_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_signing_identity();
      signing_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signing_identity_);
    }
    if (cached_has_bits & 0x00000020u) {
      enable_appstore_build_ = from.enable_appstore_build_;
    }
    if (cached_has_bits & 0x00000040u) {
      allow_incoming_connections_ = from.allow_incoming_connections_;
    }
    if (cached_has_bits & 0x00000080u) {
      allow_outgoing_connections_ = from.allow_outgoing_connections_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Deployment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Deployment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deployment::CopyFrom(const Deployment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Deployment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deployment::IsInitialized() const {
  return true;
}

void Deployment::Swap(Deployment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Deployment::InternalSwap(Deployment* other) {
  using std::swap;
  app_id_.Swap(&other->app_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_output_.Swap(&other->app_output_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_identifier_.Swap(&other->team_identifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_category_.Swap(&other->app_category_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signing_identity_.Swap(&other->signing_identity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enable_appstore_build_, other->enable_appstore_build_);
  swap(allow_incoming_connections_, other->allow_incoming_connections_);
  swap(allow_outgoing_connections_, other->allow_outgoing_connections_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Deployment::GetMetadata() const {
  protobuf_Settings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Settings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace buffers
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::buffers::resources::Settings* Arena::CreateMaybeMessage< ::buffers::resources::Settings >(Arena* arena) {
  return Arena::CreateInternal< ::buffers::resources::Settings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::buffers::resources::API* Arena::CreateMaybeMessage< ::buffers::resources::API >(Arena* arena) {
  return Arena::CreateInternal< ::buffers::resources::API >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::buffers::resources::Compiler* Arena::CreateMaybeMessage< ::buffers::resources::Compiler >(Arena* arena) {
  return Arena::CreateInternal< ::buffers::resources::Compiler >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::buffers::resources::General* Arena::CreateMaybeMessage< ::buffers::resources::General >(Arena* arena) {
  return Arena::CreateInternal< ::buffers::resources::General >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::buffers::resources::Graphics* Arena::CreateMaybeMessage< ::buffers::resources::Graphics >(Arena* arena) {
  return Arena::CreateInternal< ::buffers::resources::Graphics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::buffers::resources::Info* Arena::CreateMaybeMessage< ::buffers::resources::Info >(Arena* arena) {
  return Arena::CreateInternal< ::buffers::resources::Info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::buffers::resources::Installer* Arena::CreateMaybeMessage< ::buffers::resources::Installer >(Arena* arena) {
  return Arena::CreateInternal< ::buffers::resources::Installer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::buffers::resources::Deployment* Arena::CreateMaybeMessage< ::buffers::resources::Deployment >(Arena* arena) {
  return Arena::CreateInternal< ::buffers::resources::Deployment >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
