// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: treenode.proto

#ifndef PROTOBUF_INCLUDED_treenode_2eproto
#define PROTOBUF_INCLUDED_treenode_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Sprite.pb.h"
#include "Sound.pb.h"
#include "Background.pb.h"
#include "Object.pb.h"
#include "Script.pb.h"
#include "Shader.pb.h"
#include "Path.pb.h"
#include "Font.pb.h"
#include "Timeline.pb.h"
#include "Room.pb.h"
#include "Include.pb.h"
#include "Settings.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_treenode_2eproto 

namespace protobuf_treenode_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_treenode_2eproto
namespace buffers {
class TreeNode;
class TreeNodeDefaultTypeInternal;
extern TreeNodeDefaultTypeInternal _TreeNode_default_instance_;
}  // namespace buffers
namespace google {
namespace protobuf {
template<> ::buffers::TreeNode* Arena::CreateMaybeMessage<::buffers::TreeNode>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace buffers {

// ===================================================================

class TreeNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.TreeNode) */ {
 public:
  TreeNode();
  virtual ~TreeNode();

  TreeNode(const TreeNode& from);

  inline TreeNode& operator=(const TreeNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeNode(TreeNode&& from) noexcept
    : TreeNode() {
    *this = ::std::move(from);
  }

  inline TreeNode& operator=(TreeNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeNode& default_instance();

  enum TypeCase {
    kFolder = 1,
    kSprite = 2,
    kSound = 3,
    kBackground = 4,
    kPath = 5,
    kScript = 6,
    kShader = 7,
    kFont = 8,
    kTimeline = 9,
    kObject = 10,
    kRoom = 11,
    kInclude = 12,
    kSettings = 13,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeNode* internal_default_instance() {
    return reinterpret_cast<const TreeNode*>(
               &_TreeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TreeNode* other);
  friend void swap(TreeNode& a, TreeNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeNode* New() const final {
    return CreateMaybeMessage<TreeNode>(NULL);
  }

  TreeNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TreeNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TreeNode& from);
  void MergeFrom(const TreeNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .buffers.TreeNode child = 17;
  int child_size() const;
  void clear_child();
  static const int kChildFieldNumber = 17;
  ::buffers::TreeNode* mutable_child(int index);
  ::google::protobuf::RepeatedPtrField< ::buffers::TreeNode >*
      mutable_child();
  const ::buffers::TreeNode& child(int index) const;
  ::buffers::TreeNode* add_child();
  const ::google::protobuf::RepeatedPtrField< ::buffers::TreeNode >&
      child() const;

  // optional string name = 16;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 16;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool folder = 1;
  bool has_folder() const;
  void clear_folder();
  static const int kFolderFieldNumber = 1;
  bool folder() const;
  void set_folder(bool value);

  // optional .buffers.resources.Sprite sprite = 2;
  bool has_sprite() const;
  void clear_sprite();
  static const int kSpriteFieldNumber = 2;
  private:
  const ::buffers::resources::Sprite& _internal_sprite() const;
  public:
  const ::buffers::resources::Sprite& sprite() const;
  ::buffers::resources::Sprite* release_sprite();
  ::buffers::resources::Sprite* mutable_sprite();
  void set_allocated_sprite(::buffers::resources::Sprite* sprite);

  // optional .buffers.resources.Sound sound = 3;
  bool has_sound() const;
  void clear_sound();
  static const int kSoundFieldNumber = 3;
  private:
  const ::buffers::resources::Sound& _internal_sound() const;
  public:
  const ::buffers::resources::Sound& sound() const;
  ::buffers::resources::Sound* release_sound();
  ::buffers::resources::Sound* mutable_sound();
  void set_allocated_sound(::buffers::resources::Sound* sound);

  // optional .buffers.resources.Background background = 4;
  bool has_background() const;
  void clear_background();
  static const int kBackgroundFieldNumber = 4;
  private:
  const ::buffers::resources::Background& _internal_background() const;
  public:
  const ::buffers::resources::Background& background() const;
  ::buffers::resources::Background* release_background();
  ::buffers::resources::Background* mutable_background();
  void set_allocated_background(::buffers::resources::Background* background);

  // optional .buffers.resources.Path path = 5;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 5;
  private:
  const ::buffers::resources::Path& _internal_path() const;
  public:
  const ::buffers::resources::Path& path() const;
  ::buffers::resources::Path* release_path();
  ::buffers::resources::Path* mutable_path();
  void set_allocated_path(::buffers::resources::Path* path);

  // optional .buffers.resources.Script script = 6;
  bool has_script() const;
  void clear_script();
  static const int kScriptFieldNumber = 6;
  private:
  const ::buffers::resources::Script& _internal_script() const;
  public:
  const ::buffers::resources::Script& script() const;
  ::buffers::resources::Script* release_script();
  ::buffers::resources::Script* mutable_script();
  void set_allocated_script(::buffers::resources::Script* script);

  // optional .buffers.resources.Shader shader = 7;
  bool has_shader() const;
  void clear_shader();
  static const int kShaderFieldNumber = 7;
  private:
  const ::buffers::resources::Shader& _internal_shader() const;
  public:
  const ::buffers::resources::Shader& shader() const;
  ::buffers::resources::Shader* release_shader();
  ::buffers::resources::Shader* mutable_shader();
  void set_allocated_shader(::buffers::resources::Shader* shader);

  // optional .buffers.resources.Font font = 8;
  bool has_font() const;
  void clear_font();
  static const int kFontFieldNumber = 8;
  private:
  const ::buffers::resources::Font& _internal_font() const;
  public:
  const ::buffers::resources::Font& font() const;
  ::buffers::resources::Font* release_font();
  ::buffers::resources::Font* mutable_font();
  void set_allocated_font(::buffers::resources::Font* font);

  // optional .buffers.resources.Timeline timeline = 9;
  bool has_timeline() const;
  void clear_timeline();
  static const int kTimelineFieldNumber = 9;
  private:
  const ::buffers::resources::Timeline& _internal_timeline() const;
  public:
  const ::buffers::resources::Timeline& timeline() const;
  ::buffers::resources::Timeline* release_timeline();
  ::buffers::resources::Timeline* mutable_timeline();
  void set_allocated_timeline(::buffers::resources::Timeline* timeline);

  // optional .buffers.resources.Object object = 10;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 10;
  private:
  const ::buffers::resources::Object& _internal_object() const;
  public:
  const ::buffers::resources::Object& object() const;
  ::buffers::resources::Object* release_object();
  ::buffers::resources::Object* mutable_object();
  void set_allocated_object(::buffers::resources::Object* object);

  // optional .buffers.resources.Room room = 11;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 11;
  private:
  const ::buffers::resources::Room& _internal_room() const;
  public:
  const ::buffers::resources::Room& room() const;
  ::buffers::resources::Room* release_room();
  ::buffers::resources::Room* mutable_room();
  void set_allocated_room(::buffers::resources::Room* room);

  // optional .buffers.resources.Include include = 12;
  bool has_include() const;
  void clear_include();
  static const int kIncludeFieldNumber = 12;
  private:
  const ::buffers::resources::Include& _internal_include() const;
  public:
  const ::buffers::resources::Include& include() const;
  ::buffers::resources::Include* release_include();
  ::buffers::resources::Include* mutable_include();
  void set_allocated_include(::buffers::resources::Include* include);

  // optional .buffers.resources.Settings settings = 13;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 13;
  private:
  const ::buffers::resources::Settings& _internal_settings() const;
  public:
  const ::buffers::resources::Settings& settings() const;
  ::buffers::resources::Settings* release_settings();
  ::buffers::resources::Settings* mutable_settings();
  void set_allocated_settings(::buffers::resources::Settings* settings);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:buffers.TreeNode)
 private:
  void set_has_folder();
  void set_has_sprite();
  void set_has_sound();
  void set_has_background();
  void set_has_path();
  void set_has_script();
  void set_has_shader();
  void set_has_font();
  void set_has_timeline();
  void set_has_object();
  void set_has_room();
  void set_has_include();
  void set_has_settings();
  void set_has_name();
  void clear_has_name();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::buffers::TreeNode > child_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union TypeUnion {
    TypeUnion() {}
    bool folder_;
    ::buffers::resources::Sprite* sprite_;
    ::buffers::resources::Sound* sound_;
    ::buffers::resources::Background* background_;
    ::buffers::resources::Path* path_;
    ::buffers::resources::Script* script_;
    ::buffers::resources::Shader* shader_;
    ::buffers::resources::Font* font_;
    ::buffers::resources::Timeline* timeline_;
    ::buffers::resources::Object* object_;
    ::buffers::resources::Room* room_;
    ::buffers::resources::Include* include_;
    ::buffers::resources::Settings* settings_;
  } type_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_treenode_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TreeNode

// optional bool folder = 1;
inline bool TreeNode::has_folder() const {
  return type_case() == kFolder;
}
inline void TreeNode::set_has_folder() {
  _oneof_case_[0] = kFolder;
}
inline void TreeNode::clear_folder() {
  if (has_folder()) {
    type_.folder_ = false;
    clear_has_type();
  }
}
inline bool TreeNode::folder() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.folder)
  if (has_folder()) {
    return type_.folder_;
  }
  return false;
}
inline void TreeNode::set_folder(bool value) {
  if (!has_folder()) {
    clear_type();
    set_has_folder();
  }
  type_.folder_ = value;
  // @@protoc_insertion_point(field_set:buffers.TreeNode.folder)
}

// optional .buffers.resources.Sprite sprite = 2;
inline bool TreeNode::has_sprite() const {
  return type_case() == kSprite;
}
inline void TreeNode::set_has_sprite() {
  _oneof_case_[0] = kSprite;
}
inline const ::buffers::resources::Sprite& TreeNode::_internal_sprite() const {
  return *type_.sprite_;
}
inline ::buffers::resources::Sprite* TreeNode::release_sprite() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.sprite)
  if (has_sprite()) {
    clear_has_type();
      ::buffers::resources::Sprite* temp = type_.sprite_;
    type_.sprite_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Sprite& TreeNode::sprite() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.sprite)
  return has_sprite()
      ? *type_.sprite_
      : *reinterpret_cast< ::buffers::resources::Sprite*>(&::buffers::resources::_Sprite_default_instance_);
}
inline ::buffers::resources::Sprite* TreeNode::mutable_sprite() {
  if (!has_sprite()) {
    clear_type();
    set_has_sprite();
    type_.sprite_ = CreateMaybeMessage< ::buffers::resources::Sprite >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.sprite)
  return type_.sprite_;
}

// optional .buffers.resources.Sound sound = 3;
inline bool TreeNode::has_sound() const {
  return type_case() == kSound;
}
inline void TreeNode::set_has_sound() {
  _oneof_case_[0] = kSound;
}
inline const ::buffers::resources::Sound& TreeNode::_internal_sound() const {
  return *type_.sound_;
}
inline ::buffers::resources::Sound* TreeNode::release_sound() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.sound)
  if (has_sound()) {
    clear_has_type();
      ::buffers::resources::Sound* temp = type_.sound_;
    type_.sound_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Sound& TreeNode::sound() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.sound)
  return has_sound()
      ? *type_.sound_
      : *reinterpret_cast< ::buffers::resources::Sound*>(&::buffers::resources::_Sound_default_instance_);
}
inline ::buffers::resources::Sound* TreeNode::mutable_sound() {
  if (!has_sound()) {
    clear_type();
    set_has_sound();
    type_.sound_ = CreateMaybeMessage< ::buffers::resources::Sound >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.sound)
  return type_.sound_;
}

// optional .buffers.resources.Background background = 4;
inline bool TreeNode::has_background() const {
  return type_case() == kBackground;
}
inline void TreeNode::set_has_background() {
  _oneof_case_[0] = kBackground;
}
inline const ::buffers::resources::Background& TreeNode::_internal_background() const {
  return *type_.background_;
}
inline ::buffers::resources::Background* TreeNode::release_background() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.background)
  if (has_background()) {
    clear_has_type();
      ::buffers::resources::Background* temp = type_.background_;
    type_.background_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Background& TreeNode::background() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.background)
  return has_background()
      ? *type_.background_
      : *reinterpret_cast< ::buffers::resources::Background*>(&::buffers::resources::_Background_default_instance_);
}
inline ::buffers::resources::Background* TreeNode::mutable_background() {
  if (!has_background()) {
    clear_type();
    set_has_background();
    type_.background_ = CreateMaybeMessage< ::buffers::resources::Background >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.background)
  return type_.background_;
}

// optional .buffers.resources.Path path = 5;
inline bool TreeNode::has_path() const {
  return type_case() == kPath;
}
inline void TreeNode::set_has_path() {
  _oneof_case_[0] = kPath;
}
inline const ::buffers::resources::Path& TreeNode::_internal_path() const {
  return *type_.path_;
}
inline ::buffers::resources::Path* TreeNode::release_path() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.path)
  if (has_path()) {
    clear_has_type();
      ::buffers::resources::Path* temp = type_.path_;
    type_.path_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Path& TreeNode::path() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.path)
  return has_path()
      ? *type_.path_
      : *reinterpret_cast< ::buffers::resources::Path*>(&::buffers::resources::_Path_default_instance_);
}
inline ::buffers::resources::Path* TreeNode::mutable_path() {
  if (!has_path()) {
    clear_type();
    set_has_path();
    type_.path_ = CreateMaybeMessage< ::buffers::resources::Path >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.path)
  return type_.path_;
}

// optional .buffers.resources.Script script = 6;
inline bool TreeNode::has_script() const {
  return type_case() == kScript;
}
inline void TreeNode::set_has_script() {
  _oneof_case_[0] = kScript;
}
inline const ::buffers::resources::Script& TreeNode::_internal_script() const {
  return *type_.script_;
}
inline ::buffers::resources::Script* TreeNode::release_script() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.script)
  if (has_script()) {
    clear_has_type();
      ::buffers::resources::Script* temp = type_.script_;
    type_.script_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Script& TreeNode::script() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.script)
  return has_script()
      ? *type_.script_
      : *reinterpret_cast< ::buffers::resources::Script*>(&::buffers::resources::_Script_default_instance_);
}
inline ::buffers::resources::Script* TreeNode::mutable_script() {
  if (!has_script()) {
    clear_type();
    set_has_script();
    type_.script_ = CreateMaybeMessage< ::buffers::resources::Script >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.script)
  return type_.script_;
}

// optional .buffers.resources.Shader shader = 7;
inline bool TreeNode::has_shader() const {
  return type_case() == kShader;
}
inline void TreeNode::set_has_shader() {
  _oneof_case_[0] = kShader;
}
inline const ::buffers::resources::Shader& TreeNode::_internal_shader() const {
  return *type_.shader_;
}
inline ::buffers::resources::Shader* TreeNode::release_shader() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.shader)
  if (has_shader()) {
    clear_has_type();
      ::buffers::resources::Shader* temp = type_.shader_;
    type_.shader_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Shader& TreeNode::shader() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.shader)
  return has_shader()
      ? *type_.shader_
      : *reinterpret_cast< ::buffers::resources::Shader*>(&::buffers::resources::_Shader_default_instance_);
}
inline ::buffers::resources::Shader* TreeNode::mutable_shader() {
  if (!has_shader()) {
    clear_type();
    set_has_shader();
    type_.shader_ = CreateMaybeMessage< ::buffers::resources::Shader >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.shader)
  return type_.shader_;
}

// optional .buffers.resources.Font font = 8;
inline bool TreeNode::has_font() const {
  return type_case() == kFont;
}
inline void TreeNode::set_has_font() {
  _oneof_case_[0] = kFont;
}
inline const ::buffers::resources::Font& TreeNode::_internal_font() const {
  return *type_.font_;
}
inline ::buffers::resources::Font* TreeNode::release_font() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.font)
  if (has_font()) {
    clear_has_type();
      ::buffers::resources::Font* temp = type_.font_;
    type_.font_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Font& TreeNode::font() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.font)
  return has_font()
      ? *type_.font_
      : *reinterpret_cast< ::buffers::resources::Font*>(&::buffers::resources::_Font_default_instance_);
}
inline ::buffers::resources::Font* TreeNode::mutable_font() {
  if (!has_font()) {
    clear_type();
    set_has_font();
    type_.font_ = CreateMaybeMessage< ::buffers::resources::Font >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.font)
  return type_.font_;
}

// optional .buffers.resources.Timeline timeline = 9;
inline bool TreeNode::has_timeline() const {
  return type_case() == kTimeline;
}
inline void TreeNode::set_has_timeline() {
  _oneof_case_[0] = kTimeline;
}
inline const ::buffers::resources::Timeline& TreeNode::_internal_timeline() const {
  return *type_.timeline_;
}
inline ::buffers::resources::Timeline* TreeNode::release_timeline() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.timeline)
  if (has_timeline()) {
    clear_has_type();
      ::buffers::resources::Timeline* temp = type_.timeline_;
    type_.timeline_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Timeline& TreeNode::timeline() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.timeline)
  return has_timeline()
      ? *type_.timeline_
      : *reinterpret_cast< ::buffers::resources::Timeline*>(&::buffers::resources::_Timeline_default_instance_);
}
inline ::buffers::resources::Timeline* TreeNode::mutable_timeline() {
  if (!has_timeline()) {
    clear_type();
    set_has_timeline();
    type_.timeline_ = CreateMaybeMessage< ::buffers::resources::Timeline >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.timeline)
  return type_.timeline_;
}

// optional .buffers.resources.Object object = 10;
inline bool TreeNode::has_object() const {
  return type_case() == kObject;
}
inline void TreeNode::set_has_object() {
  _oneof_case_[0] = kObject;
}
inline const ::buffers::resources::Object& TreeNode::_internal_object() const {
  return *type_.object_;
}
inline ::buffers::resources::Object* TreeNode::release_object() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.object)
  if (has_object()) {
    clear_has_type();
      ::buffers::resources::Object* temp = type_.object_;
    type_.object_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Object& TreeNode::object() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.object)
  return has_object()
      ? *type_.object_
      : *reinterpret_cast< ::buffers::resources::Object*>(&::buffers::resources::_Object_default_instance_);
}
inline ::buffers::resources::Object* TreeNode::mutable_object() {
  if (!has_object()) {
    clear_type();
    set_has_object();
    type_.object_ = CreateMaybeMessage< ::buffers::resources::Object >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.object)
  return type_.object_;
}

// optional .buffers.resources.Room room = 11;
inline bool TreeNode::has_room() const {
  return type_case() == kRoom;
}
inline void TreeNode::set_has_room() {
  _oneof_case_[0] = kRoom;
}
inline const ::buffers::resources::Room& TreeNode::_internal_room() const {
  return *type_.room_;
}
inline ::buffers::resources::Room* TreeNode::release_room() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.room)
  if (has_room()) {
    clear_has_type();
      ::buffers::resources::Room* temp = type_.room_;
    type_.room_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Room& TreeNode::room() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.room)
  return has_room()
      ? *type_.room_
      : *reinterpret_cast< ::buffers::resources::Room*>(&::buffers::resources::_Room_default_instance_);
}
inline ::buffers::resources::Room* TreeNode::mutable_room() {
  if (!has_room()) {
    clear_type();
    set_has_room();
    type_.room_ = CreateMaybeMessage< ::buffers::resources::Room >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.room)
  return type_.room_;
}

// optional .buffers.resources.Include include = 12;
inline bool TreeNode::has_include() const {
  return type_case() == kInclude;
}
inline void TreeNode::set_has_include() {
  _oneof_case_[0] = kInclude;
}
inline const ::buffers::resources::Include& TreeNode::_internal_include() const {
  return *type_.include_;
}
inline ::buffers::resources::Include* TreeNode::release_include() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.include)
  if (has_include()) {
    clear_has_type();
      ::buffers::resources::Include* temp = type_.include_;
    type_.include_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Include& TreeNode::include() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.include)
  return has_include()
      ? *type_.include_
      : *reinterpret_cast< ::buffers::resources::Include*>(&::buffers::resources::_Include_default_instance_);
}
inline ::buffers::resources::Include* TreeNode::mutable_include() {
  if (!has_include()) {
    clear_type();
    set_has_include();
    type_.include_ = CreateMaybeMessage< ::buffers::resources::Include >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.include)
  return type_.include_;
}

// optional .buffers.resources.Settings settings = 13;
inline bool TreeNode::has_settings() const {
  return type_case() == kSettings;
}
inline void TreeNode::set_has_settings() {
  _oneof_case_[0] = kSettings;
}
inline const ::buffers::resources::Settings& TreeNode::_internal_settings() const {
  return *type_.settings_;
}
inline ::buffers::resources::Settings* TreeNode::release_settings() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.settings)
  if (has_settings()) {
    clear_has_type();
      ::buffers::resources::Settings* temp = type_.settings_;
    type_.settings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::buffers::resources::Settings& TreeNode::settings() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.settings)
  return has_settings()
      ? *type_.settings_
      : *reinterpret_cast< ::buffers::resources::Settings*>(&::buffers::resources::_Settings_default_instance_);
}
inline ::buffers::resources::Settings* TreeNode::mutable_settings() {
  if (!has_settings()) {
    clear_type();
    set_has_settings();
    type_.settings_ = CreateMaybeMessage< ::buffers::resources::Settings >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.settings)
  return type_.settings_;
}

// optional string name = 16;
inline bool TreeNode::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreeNode::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreeNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreeNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TreeNode::name() const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.name)
  return name_.GetNoArena();
}
inline void TreeNode::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.TreeNode.name)
}
#if LANG_CXX11
inline void TreeNode::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.TreeNode.name)
}
#endif
inline void TreeNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.TreeNode.name)
}
inline void TreeNode::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.TreeNode.name)
}
inline ::std::string* TreeNode::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TreeNode::release_name() {
  // @@protoc_insertion_point(field_release:buffers.TreeNode.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TreeNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.TreeNode.name)
}

// repeated .buffers.TreeNode child = 17;
inline int TreeNode::child_size() const {
  return child_.size();
}
inline void TreeNode::clear_child() {
  child_.Clear();
}
inline ::buffers::TreeNode* TreeNode::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.TreeNode.child)
  return child_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::TreeNode >*
TreeNode::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:buffers.TreeNode.child)
  return &child_;
}
inline const ::buffers::TreeNode& TreeNode::child(int index) const {
  // @@protoc_insertion_point(field_get:buffers.TreeNode.child)
  return child_.Get(index);
}
inline ::buffers::TreeNode* TreeNode::add_child() {
  // @@protoc_insertion_point(field_add:buffers.TreeNode.child)
  return child_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::TreeNode >&
TreeNode::child() const {
  // @@protoc_insertion_point(field_list:buffers.TreeNode.child)
  return child_;
}

inline bool TreeNode::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void TreeNode::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline TreeNode::TypeCase TreeNode::type_case() const {
  return TreeNode::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace buffers

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_treenode_2eproto
